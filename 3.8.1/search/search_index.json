{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the RomM Project, the premier self-hosted, open source ROM manager.</p> Website | Demo <p>RomM (ROM Manager) allows you to scan, enrich, and browse your game collection with a clean and responsive interface. With support for multiple platforms, various naming schemes, and custom tags, RomM is a must-have for anyone who plays on emulators.</p> <p>To get started with RomM, head over to the Quick Start guide in the main repository.</p>"},{"location":"#philosophy","title":"Philosophy","text":"<p>At the heart of this project is a commitment to freedom, collaboration, and transparency. We believe that software should be built for the benefit of its users, rather than solely to maximize profit or serve the interests of a few stakeholders, ensuring that it doesn't manipulate, exploit, or prioritize data collection.</p> <p>By offering RomM as a self-hosted, open-source solution, we ensure that everyone has the ability to manage their game collections on their own terms, and own their data, all without being tied to proprietary systems or services.</p> <p>Rom is and will always be free and open-source software.</p> <p>The core app is licensed under GNU AGPLv3, which requires that all modifications to the code be made available under the same license. This ensures that the community can benefit from and build upon the contributions of others, promoting trust and transparency.</p> <p>Other projects under the umbrella will be licensed under similar permissive licenses, such as GNU GPLv3 for software, or CC0 for documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>RomM is a collaborative project, and we welcome contributions from the community. Our code is available on GitHub, and we encourage you to contribute to the project by submitting bug reports, feature requests, or pull requests. Please check the contribution guidelines in each project for more information.</p>"},{"location":"#community","title":"Community","text":"<p>We strive to create a safe and respectful space where everyone can contribute and benefit from the project by fostering a welcoming and inclusive environment for all users, regardless of their background or identity.</p> <p>Join us on Discord, where you can ask questions, submit ideas, get help, showcase your collection, and discuss RomM with other users.</p>"},{"location":"Getting-Started/Authentication/","title":"Authentication","text":"<p>RomM provides support for various forms of authentication, granting flexibility in securing access to its features.</p>"},{"location":"Getting-Started/Authentication/#setup","title":"Setup","text":"<p>You'll want to set the following environment variable before starting RomM:</p> <ul> <li><code>ROMM_AUTH_SECRET_KEY</code> is required and can be generated with <code>openssl rand -hex 32</code></li> </ul>"},{"location":"Getting-Started/Authentication/#sessions","title":"Sessions","text":"<p>When the <code>/login</code> endpoint is called with valid credentials, a <code>session_id</code> is generated, stored as a cookie and sent to the browser. The same token is used to create a cache entry in Redis (or in-memory if Redis is disabled) which maps the token to the user. This way no sensitive information is stored on the client.</p>"},{"location":"Getting-Started/Authentication/#roles","title":"Roles","text":"<p>A user can have one of the following roles:</p> <ul> <li>VIEWER: Can view platforms and ROMs, download ROMs, and edit own profile</li> <li>EDITOR: Can create/edit/delete platforms and ROMs</li> <li>ADMIN: Can view all users, and create/edit/disable/delete users</li> </ul> <p>As permissions are additive, editors will have all permissions of the <code>viewer</code> role, and admins all those of the <code>editor</code> role.</p>"},{"location":"Getting-Started/Authentication/#basic-authentication","title":"Basic Authentication","text":"<p>Requests can be made to protected API endpoints with an authorization header. The token is the base64 encoded value of <code>username:password</code>.</p> <p>Example using cURL:</p> <pre><code>curl https://romm.local/api/platforms -H 'Authorization: Basic YWRtaW46aHVudGVyMg=='\n</code></pre>"},{"location":"Getting-Started/Authentication/#oauth","title":"OAuth","text":"<p>Along with the above forms of authentication, we've added an endpoint to generate expiring, scope-limited authentication tokens (<code>/api/token</code>). Successfully authenticating with that endpoint with return an <code>access_token</code> valid for 15 minutes, and a <code>refresh_token</code> valid for 2 weeks. The <code>refresh_token</code> can be used to generate a new <code>access_token</code> when needed.</p> <p>The <code>/api/token</code> endpoint requires a username, password, and a list of scopes in the format <code>read:roms write:roms read:platforms ...</code>. The list of scopes and endpoints are available to browse via Swagger UI or ReDoc (see next section).</p> <p>Note: As of now, only the legacy password grant type is supported. We plan to eventually add support for Client Credentials.</p>"},{"location":"Getting-Started/Authentication/#openapi","title":"OpenAPI","text":"<p>The API endpoints are fully documented and compliant with the OpenAPI specification. Explore the API endpoints using the Swagger UI interface at <code>/api/docs</code> and the ReDoc interface at <code>/api/redoc</code>, or view the raw JSON at <code>/openapi.json</code>.</p> <p>For more information on OpenAPI, visit the OpenAPI Specification website.</p>"},{"location":"Getting-Started/Authentication/#faq","title":"FAQ","text":""},{"location":"Getting-Started/Authentication/#can-i-disable-authentication","title":"Can I disable authentication?","text":"<p>No, authentication is required and enabled by default.</p>"},{"location":"Getting-Started/Authentication/#i-want-to-allow-an-editor-to-edit-roms-but-not-delete-them-can-i-do-that","title":"I want to allow an EDITOR to edit ROMs but not delete them. Can I do that?","text":"<p>At this time, fine-grain control over permissions within a role is not supported. This decision was taking in order to simplify user management in the client, and authentication/permission code on the server.</p>"},{"location":"Getting-Started/Authentication/#is-authentication-saferobust-can-i-trust-it","title":"Is authentication safe/robust? Can I trust it?","text":"<p>We've done our best to build an authentication system that is simple, clear and comprehensible. We have automated tests which verify that access is granted when it should be, and blocked when not (invalid credentials, missing permissions, expired access tokens, etc.). That being said, we welcome any reviews of our authentication and permission flows, PRs to fix issues, and new tests to cover edge cases.</p>"},{"location":"Getting-Started/Authentication/#i-found-an-bugissue-with-authentication-how-do-i-report-it","title":"I found an bug/issue with authentication. How do I report it?","text":"<p>Please report bugs in our authentication/permission system privately by submitting a vulnerability report.</p>"},{"location":"Getting-Started/Environment-Variables/","title":"Environment Variables","text":"<p>This is a complete list of available environment variables; required variables are marked with a <code>\u2713</code>.</p> <p>Tip</p> <p>You can also set environment variables with a <code>_FILE</code> suffix, which will load the contents of the file specified in the variable into the variable without the suffix. For example, setting <code>ROMM_AUTH_SECRET_KEY_FILE=/run/secrets/romm_auth_secret_key</code> and creating a file with the secret key at the specified path will set <code>ROMM_AUTH_SECRET_KEY</code> to the contents of the file. Learn more.</p>"},{"location":"Getting-Started/Environment-Variables/#application-settings","title":"Application settings","text":"Variable Description Required Default ROMM_AUTH_SECRET_KEY Generate a key with <code>openssl rand -hex 32</code> \u2713 DISABLE_CSRF_PROTECTION Disables CSRF protection (not recommended) <code>false</code> DISABLE_DOWNLOAD_ENDPOINT_AUTH Disable auth on download endpoint (WebRcade, Tinfoil) <code>false</code> DISABLE_USERPASS_LOGIN Disables login with username and password (when using OIDC) <code>false</code> KIOSK_MODE Read-only mode for public displays or kiosks <code>false</code> UPLOAD_TIMEOUT Timeout for file uploads (in seconds) <code>600</code> SCAN_TIMEOUT Timeout for the background scan/rescan tasks (in seconds) <code>14400</code> DISABLE_EMULATOR_JS Disables playing in browser with EmulatorJS <code>false</code> DISABLE_RUFFLE_RS Disables playing flash games with RuffleRS <code>false</code> TZ Sets the timezone <code>UTC</code> GUNICORN_WORKERS [deprecated] Number of processes running the app <code>2</code> WEB_CONCURRENCY Number of processes running the app <code>2</code> ROMM_PORT Port on which the application listens <code>8080</code> ROMM_BASE_PATH Base folder path for library, resources and assets <code>/romm</code> LOGLEVEL Logging level for the app <code>INFO</code> FORCE_COLOR Forces color output <code>false</code> NO_COLOR Disables color output <code>false</code>"},{"location":"Getting-Started/Environment-Variables/#dependencies","title":"Dependencies","text":"Variable Description Required Default DB_HOST Host name of database instance \u2713 <code>127.0.0.1</code> DB_PORT Port number of database instance <code>3306</code> DB_NAME Should match MYSQL_DATABASE in MariaDB <code>romm</code> DB_USER Database username (in MariaDB, should match MARIADB_USER) \u2713 DB_PASSWD Database password (in MariaDB, should match MARIADB_PASSWORD) \u2713 ROMM_DB_DRIVER Database driver to use (options: <code>mariadb</code>, <code>mysql</code>, <code>postgresql</code>) <code>mariadb</code> REDIS_HOST Host name of Redis/Valkey instance <code>127.0.0.1</code> REDIS_PORT Port number of Redis/Valkey instance <code>6379</code> REDIS_USERNAME Username for Redis/Valkey instance REDIS_PASSWORD Password for Redis/Valkey instance REDIS_DB Database number for Redis/Valkey instance <code>0</code> REDIS_SSL Enable SSL for Redis instance <code>false</code> SENTRY_DSN DSN for Sentry error tracking"},{"location":"Getting-Started/Environment-Variables/#metadata-providers","title":"Metadata providers","text":"Variable Description Required Default IGDB_CLIENT_ID Client ID for IGDB API IGDB_CLIENT_SECRET Client secret for IGDB API SCREENSCRAPER_USER Screenscraper username SCREENSCRAPER_PASSWORD Screenscraper password MOBYGAMES_API_KEY MobyGames secret API key STEAMGRIDDB_API_KEY SteamGridDB secret API key"},{"location":"Getting-Started/Environment-Variables/#authentication","title":"Authentication","text":"Variable Description Required Default OIDC_ENABLED Enable OpenID Connect (OIDC) authentication <code>false</code> OIDC_PROVIDER Name of the OIDC provider in use OIDC_CLIENT_ID Client ID for OIDC authentication OIDC_CLIENT_SECRET Client secret for OIDC authentication OIDC_REDIRECT_URI Absolute redirect URI for OIDC authentication OIDC_SERVER_APPLICATION_URL Absolute URL of the OIDC server application OIDC_TLS_CACERTFILE Path to a file containing trusted CA certificates"},{"location":"Getting-Started/Environment-Variables/#background-tasks","title":"Background tasks","text":"Variable Description Required Default ENABLE_RESCAN_ON_FILESYSTEM_CHANGE Enable re-scanning of library when filesystem changes <code>false</code> RESCAN_ON_FILESYSTEM_CHANGE_DELAY Delay in minutes before re-scanning library when filesystem changes <code>5</code> ENABLE_SCHEDULED_RESCAN Enable scheduled re-scanning of library <code>false</code> SCHEDULED_RESCAN_CRON Cron expression for scheduled re-scanning <code>\"0 3 * * *\"</code> ENABLE_SCHEDULED_UPDATE_SWITCH_TITLEDB Enable scheduled updating of Switch TitleDB index <code>false</code> SCHEDULED_UPDATE_SWITCH_TITLEDB_CRON Cron expression for scheduled updating of Switch TitleDB <code>\"0 4 * * *\"</code>"},{"location":"Getting-Started/Generate-API-Keys/","title":"Generate API Keys","text":""},{"location":"Getting-Started/Generate-API-Keys/#igdb","title":"IGDB","text":"<p>To access the IGDB API you'll need a Twitch account and a valid phone number for 2FA verification. Up-to-date instructions are available in the IGDB API documentation. When registering your application in the Twitch Developer Portal, fill out the form like so:</p> <ul> <li>Name: Something unique or random like <code>correct-horse-battery-staple</code> or <code>KVV8NDXMSRFJ2MRNPNRSL7GQT</code></li> <li>OAuth Redirect URLs: <code>localhost</code></li> <li>Category: <code>Application Integration</code></li> <li>Client Type: <code>Confidential</code></li> </ul> <p>Important</p> <p>The name you pick has to be unique! Picking an existing name will fail silently, with no error messages. We recommend using <code>romm-&lt;random hash&gt;</code>, like <code>romm-3fca6fd7f94dea4a05d029f654c0c44b</code></p> <p>Note the client ID and secret that appear on screen, and use them to set <code>IGDB_CLIENT_ID</code> and <code>IGDB_CLIENT_SECRET</code> in your environment variables.</p>"},{"location":"Getting-Started/Generate-API-Keys/#mobygames","title":"MobyGames","text":"<p>To access the MobyGames API, create a MobyGames account and then visit your profile page. Click the API link under your user name to sign up for an API key. Copy the key shown and use it to set <code>MOBYGAMES_API_KEY</code>.</p> <p>Important</p> <p>MobyGames API became a paid feature. Any existing key can be used as usual, but any new API key created will be under a paywall</p>"},{"location":"Getting-Started/Generate-API-Keys/#screenscraper","title":"ScreenScraper","text":"<p>To access the ScreenScraper API, create a ScreenScraper and copy the user and password you just created to <code>SCREENSCRAPER_USER</code> and <code>SCREENSCRAPER_PASSWORD</code> respectively.</p>"},{"location":"Getting-Started/Generate-API-Keys/#steamgriddb","title":"SteamGridDB","text":"<p>To access steamGridDB API, you need to login into their website with a steam account. Once logged in, go to your API tab under the preferences page. Copy the key shown and use it to set <code>STEAMGRIDDB_API_KEY</code>.</p>"},{"location":"Getting-Started/Quick-Start-Guide/","title":"Quick Start Guide","text":"<p>This quick start guide will help you get a RomM instance up and running. It is split into 3 parts:</p> <ul> <li>Prepare</li> <li>Build</li> <li>Configure</li> </ul>"},{"location":"Getting-Started/Quick-Start-Guide/#prepare","title":"Prepare","text":"<p>This guide will assume that you already have the following done, if not - stop here and come back when you do.</p> <ul> <li>Docker and Docker Compose installed</li> <li>A Twitch account (optional)<ul> <li>2-factor authentication set up on your Twitch account</li> <li>This is required to get a developer account and an IGDB key</li> </ul> </li> <li>A Screenscraper account (optional)</li> <li>A MobyGames account (optional)</li> <li>Your ROMs organized in the correct format</li> </ul> <p>Warning</p> <p>Not setting up RomM with a metadata API will work for basic operation but can cause issues with, for instance, the Playnite plugin. It is recommended to setup IGDB API keys to avoid issues during setup.</p>"},{"location":"Getting-Started/Quick-Start-Guide/#twitch-and-mobygames-api-keys","title":"Twitch and MobyGames API Keys","text":"<p>Head over to API key docs to get your Twitch and/or Screenscraper and/or MobyGames keys, then come back here</p>"},{"location":"Getting-Started/Quick-Start-Guide/#build","title":"Build","text":"<p>Now that we have everything gathered, we can begin getting your instance set up!</p> <ol> <li>Download a copy of the latest docker-compose.example.yml file from GitHub</li> <li>Edit the file and modify the following values to configure the database<ul> <li><code>MARIADB_ROOT_PASSWORD</code>: Sets the root password of the database. Use a unique and secure password (use a password generator for simplicity)</li> <li><code>MARIADB_DATABASE</code>: Sets the database name for RomM. This can be modified - but it's not necessary</li> <li><code>MARIADB_USER</code>: User to connect to the database with. This can be modified - but it's not necessary</li> <li><code>MARIADB_PASSWORD</code>: Password for the user to connect to the database with. Use a unique and secure password (use a password generator for simplicity)</li> </ul> </li> <li>Modify the following values in the environment to configure the application. -- Other values can be changed, but should not be done unless you know what you are doing, and are outside the scope of this guide<ul> <li><code>DB_NAME</code>: Name of the database set in the database section</li> <li><code>DB_USER</code>: Name of the user to connect to the database</li> <li><code>DB_PASSWD</code>: Password of the user to connect to the database</li> </ul> </li> <li>Run the following command in a terminal and save the output to the <code>ROMM_AUTH_SECRET_KEY</code> environment variable:     <pre><code>openssl rand -hex 32\n</code></pre>     It should look something like this:     <pre><code>03a054b6ca27e0107c5eed552ea66becd9f3a2a8a91e7595cd462a593f9ecd09\n</code></pre></li> <li>Modify the following values in the volumes to configure the application<ul> <li><code>/path/to/library</code>: Path to the directory where your rom files will be stored</li> <li><code>/path/to/assets</code>: Path to the directory where you will store your saves, etc</li> <li><code>/path/to/config</code>: Path to the directory where you will store the config.yml</li> </ul> </li> <li> <p>Save the file as docker-compose.yml instead of docker-compose.example.yml. It should look something like this:</p> Example Docker Compose <pre><code>version: \"3\"\n\nvolumes:\n    mysql_data:\n    romm_resources:\n    romm_redis_data:\n\nservices:\n    romm:\n        image: rommapp/romm:latest\n        container_name: romm\n        restart: unless-stopped\n        environment:\n            - DB_HOST=romm-db\n            - DB_NAME=romm # Should match MARIADB_DATABASE in mariadb\n            - DB_USER=romm-user # Should match MARIADB_USER in mariadb\n            - DB_PASSWD= # Should match MARIADB_PASSWORD in mariadb\n            - ROMM_AUTH_SECRET_KEY= # Generate a key with `openssl rand -hex 32`\n            - IGDB_CLIENT_ID= # Generate an ID and SECRET in IGDB\n            - IGDB_CLIENT_SECRET= # https://api-docs.igdb.com/#account-creation\n            - MOBYGAMES_API_KEY= # https://www.mobygames.com/info/api/\n            - STEAMGRIDDB_API_KEY= # https://github.com/rommapp/romm/wiki/Generate-API-Keys#steamgriddb\n        volumes:\n            - romm_resources:/romm/resources # Resources fetched from IGDB (covers, screenshots, etc.)\n            - romm_redis_data:/redis-data # Cached data for background tasks\n            - /path/to/library:/romm/library # Your game library. Check https://github.com/rommapp/romm?tab=readme-ov-file#folder-structure for more details.\n            - /path/to/assets:/romm/assets # Uploaded saves, states, etc.\n            - /path/to/config:/romm/config # Path where config.yml is stored\n        ports:\n            - 80:8080\n        depends_on:\n            romm-db:\n                condition: service_healthy\n                restart: true\n\n    romm-db:\n        image: mariadb:latest\n        container_name: romm-db\n        restart: unless-stopped\n        environment:\n            - MARIADB_ROOT_PASSWORD= # Use a unique, secure password\n            - MARIADB_DATABASE=romm\n            - MARIADB_USER=romm-user\n            - MARIADB_PASSWORD=\n        volumes:\n            - mysql_data:/var/lib/mysql\n        healthcheck:\n            test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n            start_period: 30s\n            start_interval: 10s\n            interval: 10s\n            timeout: 5s\n            retries: 5\n</code></pre> </li> <li> <p>Open the terminal and navigate to the directory containing the docker-compose file</p> </li> <li>Run <code>docker compose up -d</code> to kick off the docker pull. You will see it pull the container and set up the volumes and network: RomM docker compose install </li> <li>Run <code>docker ps -f name=romm</code> to verify that the containers are running</li> <li>Open a web browser and navigate to <code>http://localhost:80</code>, where you should be greeted with the RomM setup page</li> <li>Go through the setup wizard, setting your admin username and password</li> <li>Log in with the credentials you set in the setup flow</li> </ol>"},{"location":"Getting-Started/Quick-Start-Guide/#configure","title":"Configure","text":"<p>Now that the container is running, we will configure it by importing your ROMs</p>"},{"location":"Getting-Started/Quick-Start-Guide/#uploading-your-roms-via-web-interface","title":"Uploading Your ROMs via Web Interface","text":"<p>This method is certainly viable, but not recommended if you have a lot of ROMs and/or multiple platforms. It is good for adding after the fact as your collection grows, but wouldn't be recommended for the first set up, nor for multi-file ROMs</p> <ol> <li>Log into RomM with your user credentials</li> <li>Navigate to Library -&gt; Upload ROMs</li> <li>Select the platform, then click ADD ROMs and select the ROMs you want to upload in the file selector that appears</li> <li>Click UPLOAD to begin uploading the ROMs</li> <li>Repeat for all the <code>roms/platforms</code> you have</li> </ol> <p></p>"},{"location":"Getting-Started/Quick-Start-Guide/#importing-your-roms-via-scanner","title":"Importing Your ROMs via Scanner","text":"<p>This method is generally the fastest and recommended for first time setup</p> <ol> <li>Stop your RomM instance. <code>docker compose down</code> if you are in the terminal and directory containing the docker-compose file, otherwise <code>docker stop romm</code></li> <li>Go to the library folder created by RomM, set in the docker-compose file under <code>:/romm/library</code> and create a folder named <code>roms</code></li> <li>Copy your platform folders/rom files into the <code>roms</code> folder you created</li> <li>Start the RomM instance back up. <code>docker compose up -d</code> if you are in the terminal and directory containing the docker-compose file, otherwise <code>docker start romm</code></li> <li>Log into RomM with your user credentials</li> <li>Navigate to Library -&gt; Scan</li> <li>The system will now begin scanning the rom files and applying metadata to them. You can click on any of the items that it has tagged to see the metadata it pulled without having to stop the scan</li> <li>After the scan completes, click the RomM logo to go back to the main screen. You should see the platforms and recent games it has scanned. You are now ready to rock and RomM! ```</li> </ol>"},{"location":"Getting-Started/Reverse-Proxy/","title":"Reverse Proxy","text":"<p>Here are some basic configurations for popular reverse proxies. Some installations may require modifications to configuration options not listed below.</p>"},{"location":"Getting-Started/Reverse-Proxy/#caddy","title":"Caddy","text":"<pre><code>http://romm.mysite.com {\n  reverse_proxy romm:8080\n}\n</code></pre>"},{"location":"Getting-Started/Reverse-Proxy/#caddy-tls-https","title":"Caddy + TLS (HTTPS)","text":"<pre><code>https://romm.mysite.com {\n  tls mysite.com.crt mysite.com.key  # Certificate and key files\n\n  encode zstd gzip\n\n  header * {\n    Strict-Transport-Security \"max-age=31536000;\"\n    X-XSS-Protection \"1; mode=block\"\n    X-Frame-Options \"SAMEORIGIN\"\n    X-Robots-Tag \"noindex, nofollow\"\n    -Server\n    -X-Powered-By\n  }\n\n  reverse_proxy romm:8080\n}\n</code></pre>"},{"location":"Getting-Started/Reverse-Proxy/#nginx","title":"Nginx","text":"<pre><code>server {\n  listen 80 default_server;\n  server_name romm.mysite.com;\n  client_max_body_size 0;\n\n  location / {\n    include /config/nginx/proxy.conf;\n    include /config/nginx/resolver.conf;\n    set $upstream_app romm;\n    set $upstream_port 8080;\n    set $upstream_proto http;\n    proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n  }\n}\n</code></pre>"},{"location":"Getting-Started/Reverse-Proxy/#nginx-tls-https","title":"Nginx + TLS (HTTPS)","text":"<pre><code>server {\n  listen 80 default_server;\n  server_name _;\n  return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    server_name romm.mysite.com;\n    include /config/nginx/ssl.conf;\n    client_max_body_size 0;\n\n    location / {\n      include /config/nginx/proxy.conf;\n      include /config/nginx/resolver.conf;\n      set $upstream_app romm;\n      set $upstream_port 8080;\n      set $upstream_proto http;\n      proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n\n      # Hide version\n      server_tokens off;\n\n      # Security headers\n      add_header X-Frame-Options \"SAMEORIGIN\" always;\n      add_header X-Content-Type-Options \"nosniff\" always;\n      add_header X-XSS-Protection \"1; mode=block\" always;\n      add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n      add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    }\n}\n</code></pre>"},{"location":"Getting-Started/Reverse-Proxy/#nginx-proxy-manager","title":"Nginx Proxy Manager","text":"<p>Items marked with \u2757 are important to set, as RomM may not correctly otherwise!</p>"},{"location":"Getting-Started/Reverse-Proxy/#details","title":"\u26a1 Details","text":"<ul> <li>Domain Names: <code>romm.example.com</code> (replace example with your own)* Scheme: <code>http</code></li> <li>Forward Hostname/IP: device IP (like 192.168.X.X)</li> <li>Forward Port: <code>8080</code></li> <li>Cache Assets: <code>off</code></li> <li>Block Common Exploits: <code>on</code></li> <li>Websockets Support: <code>on</code> \u2757</li> <li>Access List: -</li> </ul>"},{"location":"Getting-Started/Reverse-Proxy/#ssl","title":"\ud83d\udee1\ufe0f SSL","text":"<p>Strongly recommended, but only required if you plan to secure your site (use HTTPS)</p> <ul> <li>SSL Certificate: \"Request a new SSL Certificate\"</li> <li>Force SSL: <code>on</code></li> <li>HTTP/2 Support: <code>on</code></li> <li>HSTS Enabled: <code>off</code></li> <li>Email Address for Let's Encrypt: your email address</li> <li>I Agree to the TOS: <code>on</code></li> </ul>"},{"location":"Getting-Started/Reverse-Proxy/#advanced","title":"\u2699\ufe0f Advanced","text":"<p>Custom Nginx Configuration \u2757</p> <pre><code>proxy_max_temp_file_size 0;\n</code></pre> Details SSL Advanced"},{"location":"Getting-Started/Reverse-Proxy/#traefik","title":"Traefik","text":""},{"location":"Getting-Started/Reverse-Proxy/#using-a-configuration-document","title":"Using a configuration document","text":"<pre><code>http:\n    romsdomainse:\n        entryPoints:\n            - \"https\"\n        rule: \"Host(`roms.domain.se`)\"\n        middlewares:\n            - default-headers\n            - https-redirectscheme\n        tls:\n            certResolver: http\n        service: romsdomainse\n\nservices:\n    romsdomainse:\n        loadBalancer:\n            servers:\n                - url: \"http://192.168.1.100:8080\"\n            passHostHeader: true\n</code></pre>"},{"location":"Getting-Started/Reverse-Proxy/#using-labels-in-docker-compose","title":"Using labels in docker compose","text":"<pre><code>labels:\n    - \"traefik.enable=true\"\n    - \"traefik.http.services.romm.loadbalancer.server.port=8080\"\n    - \"traefik.http.routers.romm.rule=Host(`romm.YOUR_DOMAIN.com`)\"\n    - \"traefik.http.routers.romm.entrypoints=websecure\"\n    - \"traefik.http.routers.romm.tls=true\"\n    - \"traefik.http.routers.romm.tls.certresolver=https\"\n</code></pre>"},{"location":"Integrations/Playnite-plugin/","title":"Playnite plugin","text":"<p>Playnite is an open source video game library manager with one simple goal: To provide a unified interface for all of your games.</p> <p>This plugin allows you to import your RomM library into Playnite. It queries the RomM API to create Playnite library entires for each of your games. Installing a game in Playnite will download it from RomM and store it on your system, allowing you to launch it in your emulator of choice.</p>"},{"location":"Integrations/Playnite-plugin/#setup","title":"Setup","text":"<p>You can find the installation guide here.</p>"},{"location":"Integrations/muOS-app/","title":"muOS app","text":"<p>muOS is a Custom Firmware (CFW) primarily for handheld devices. Configurable, themeable, friendly, easy-to-use.</p> <p>The muOS app connects to your RomM instance and allows you to fetch games wirelessly from your Anbernic device.</p>"},{"location":"Integrations/muOS-app/#setup","title":"Setup","text":"<p>You can find the installation guide here.</p>"},{"location":"Maintenance/Scheduled-Tasks/","title":"Scheduled Tasks","text":""},{"location":"Maintenance/Scheduled-Tasks/#scheduled-tasks","title":"Scheduled tasks","text":"<p>Scheduled tasks can be enabled and configured with the following environment variables:</p> Variable Description Value ENABLE_SCHEDULED_RESCAN Enable scheduled re-scanning of library <code>true</code> SCHEDULED_RESCAN_CRON Cron expression for scheduled re-scanning <code>\"0 3 * * *\"</code> ENABLE_SCHEDULED_UPDATE_SWITCH_TITLEDB Enable scheduled updating of Switch TitleDB index <code>true</code> SCHEDULED_UPDATE_SWITCH_TITLEDB_CRON Cron expression for scheduled updating of Switch TitleDB <code>\"0 4 * * *\"</code> ENABLE_SCHEDULED_UPDATE_MAME_XML Enable scheduled updating of MAME XML index <code>true</code> SCHEDULED_UPDATE_MAME_XML_CRON Cron expression for scheduled updating of MAME XML <code>\"0 5 * * *\"</code>"},{"location":"Maintenance/Scheduled-Tasks/#scheduled-re-scan","title":"Scheduled re-scan","text":"<p>Users can opt to enable scheduled re-scans, and set the interval using Cron notation. Not that the scan will not completely re-scan every file, only catching those which have been added/updated.</p>"},{"location":"Maintenance/Scheduled-Tasks/#switch-titledb-update","title":"Switch titleDB update","text":"<p>Support was added for Nintendo Switch ROMs with filenames using the titleid/programid format (e.g. 0100000000010000.xci). If a file under the <code>switch</code> folder matches the regex, the scanner will use the index to attempt to match it to a game. If a match is found, the IGDB handler will use the matched name as the search term.</p> <p>The associated task updates the <code>/fixtures/switch_titledb.json</code> file at a regular interval to support new game releases.</p>"},{"location":"Maintenance/Scheduled-Tasks/#mame-xml-update","title":"MAME XML update","text":"<p>Support was also added for MAME arcade games with shortcode names (e.g. <code>actionhw.zip</code> -&gt; <code>ACTION HOLLYWOOD</code>), and works in the same way as the TitleID matcher (without the regex).</p> <p>The associated task updates the <code>/fixtures/mame.xml</code> file at a regular interval to support updates to the library.</p>"},{"location":"Maintenance/Scheduled-Tasks/#file-system-watcher","title":"File system watcher","text":"<p>RomM can also monitor the filesystem for events (files created/moved/deleted) and schedules a re-scan of the platform (or entire library is a new platform was added).</p> <p>The watcher can be enabled and configured with the following environment variables:</p> Variable Description Value ENABLE_RESCAN_ON_FILESYSTEM_CHANGE Enable re-scanning of library when filesystem changes <code>true</code> RESCAN_ON_FILESYSTEM_CHANGE_DELAY Delay in minutes before re-scanning library when filesystem changes <code>5</code> <p>The watcher will monitor the <code>/library/roms</code> folder for changes to the filesystem, such as files being added, moved or deleted. It will ignore certain events (like modifying the file content or metadata), and will skip default OS files (like <code>.DS_Store</code> on mac).</p> <p>When a change is detected, a scan will be scheduled for sometime in the future (default 5 minutes). If other events are triggered between now and the time at which the scan starts, more platforms will be added to the scan list (or the scan may switch to a full scan). This is done to reduce the number of tasks scheduled when many big changes happen to the library (mass upload, new mount, etc.)</p>"},{"location":"Maintenance/Upgrading-to-3.0/","title":"Upgrading to 3.0","text":"<p>Version 3.0 of RomM introduces a number of breaking changes aimed at improving performance and usability, which will require some users to make specific changes before upgrading to ensure compatibility and to take full advantage of the new features.</p> <p>All of the following changes are reflected in the example docker-compose.yml file, which has been simplified greatly. Please read this entire file carefully, as failing to do so may cause RomM to become inaccessible or unresponsive.</p>"},{"location":"Maintenance/Upgrading-to-3.0/#dropped-support-for-sqlite","title":"Dropped support for SQLite","text":"<p>We're removed support for SQLite as we've faced a number of engineering issues with it in the past, and MariaDB has proven more stable and robust. If you currently use SQLite, we'll automatically migrate your data from SQLite to MariaDB, but you'll first need to make the following changes before upgrading to the latest image.</p> <p>In your environment variables, change <code>ROMM_DB_DRIVER</code> to <code>mariadb</code> (or remove it completely as it's no longer needed). You'll then want to add the following environment variables:</p> <pre><code>- DB_HOST=mariadb\n- DB_PORT=3306\n- DB_NAME=romm # Should match MYSQL_DATABASE in mariadb\n- DB_USER=romm-user # Should match MYSQL_USER in mariadb\n- DB_PASSWD= # Should match MYSQL_PASSWORD in mariadb\n</code></pre> <p>To setup a new MariaDB container, have a look at the example docker-compose.yml file.</p>"},{"location":"Maintenance/Upgrading-to-3.0/#authentication-as-standard","title":"Authentication as standard","text":"<p>To support new features like EmulatorJS and saves/states management, we've decided to require authentication for all users. Anyone currently running RomM with authentication disabled will need to remove the <code>ROMM_AUTH_ENABLED</code> environment variable and add the following ones:</p> <pre><code>- ROMM_AUTH_SECRET_KEY= # Generate a key with `openssl rand -hex 32`\n</code></pre> <p>We understand that this requirement for authentication might conflict with the way some users currently share their collection with others (unrestricted access for all). However, given the exciting new features we've built, and the ones we're looking to build in the near future, we feel this is the right decision for the project.</p>"},{"location":"Maintenance/Upgrading-to-3.0/#redis-is-now-built-in","title":"Redis is now built-in","text":"<p>As Redis is required for authentication to work, we've integrated it directly into the docker image. If you're currently running the experimental Redis container, you can remove it, along with these environment variables:</p> <pre><code>- ENABLE_EXPERIMENTAL_REDIS\n- REDIS_HOST\n- REDIS_PORT\n</code></pre>"},{"location":"Maintenance/Upgrading-to-3.0/#configuration-folder","title":"Configuration folder","text":"<p>Mounting the <code>config.yml</code> file is now done by mounting a <code>config</code> folder.. Place your existing <code>config.yml</code> file inside a folder and bind it to <code>/romm/config</code>:</p> <pre><code>- /path/to/config:/romm/config\n</code></pre> <p>Updated config.example.yml</p>"},{"location":"Maintenance/Upgrading-to-3.0/#support-for-saves-states-and-screenshots","title":"Support for saves, states and screenshots","text":"<p>This version introduces preliminary support for uploading/downloading saves, states and screenshots (read more about it in the 3.0 release notes). We've added a new volume mapping for these types of files called <code>assets</code>, which you'll want to bind to a local folder (or volume) so they'll persist. In your volumes section, add the following mapping, where <code>/path/to/assets/</code> is some folder where you'll want to store these assets (and make sure that folder exists):</p> <pre><code>- /path/to/assets:/romm/assets\n</code></pre> <p>We recommend creating a folder next to your <code>library</code>/the one mapped to <code>/romm/library</code> in order to keep all your RomM files in the same place.</p>"},{"location":"Miscellaneous/Brand-Guidelines/","title":"Branding Guidelines","text":"<p>We\u2019ve put together some guidelines for those anyone who wants to use our name and logo. In this context, \"RomM\", \"The RomM Project\", \"the project\", \"we\", \"us\", and \"our\" refer to the RomM project.</p>"},{"location":"Miscellaneous/Brand-Guidelines/#the-logo","title":"The Logo","text":"The logo should always be used in its standard colors:     Color Hex Code #371f69 #553e98 #ede5f8 #bea4e1 #e6c7a7 #e1a38d"},{"location":"Miscellaneous/Brand-Guidelines/#do-these-things","title":"Do these things","text":"<ul> <li>Use our logo to link to any page or site owned or operated by the project.</li> <li>Use our logo in a blog post or news article about the project.</li> <li>Use our logo to inform others that your project integrates with RomM.</li> <li>Always use our logo in the colors provided.</li> <li>Always use our name in a way that makes it clear you are not affiliated with the project.</li> </ul> <p>If you're working on a project that integrates with RomM and would like to use/remix the logo, please reach out to us first. We'd love to hear about what you're working on!</p>"},{"location":"Miscellaneous/Brand-Guidelines/#please-dont-do-these-things","title":"Please don't do these things","text":"<ul> <li>Use our name or logo in any way that would suggest you are us, are endorsed by us, or are part of the project.</li> <li>Use our name or logo in a way that implies partnership, sponsorship, or endorsement.</li> <li>Use our name or logo as the name or logo for your project, product, service, social media account, company, or website.</li> <li>Use our name or logo to promote, advertise or sell any private business, closed-source software, commercial product, or paid service.</li> </ul>"},{"location":"Miscellaneous/FAQs/","title":"FAQs","text":""},{"location":"Miscellaneous/FAQs/#why-is-not-psp-emulation-enabled-if-emulatorjs-supports-it","title":"Why is not PSP emulation enabled if EmulatorJS supports it?","text":"<p>PSP emulation with the PPSSPP core requires special setup with a reverse proxy, or launching Chrome browser with the <code>--disable-web-security</code> and <code>--enable-features=SharedArrayBuffer</code> flags, which WE STRONGLY DISCOURAGE as it disables important security features.</p>"},{"location":"Miscellaneous/FAQs/#when-will-the-next-version-of-romm-be-available","title":"When will the next version of RomM be available?","text":"<p>When it's ready.</p>"},{"location":"Miscellaneous/FAQs/#when-will-the-version-after-that-one-release","title":"When will the version after that one release?","text":"<p>After the upcoming version is released.</p>"},{"location":"Miscellaneous/FAQs/#when-will-x-feature-be-available","title":"When will X feature be available?","text":"<p>Sometime between now and the heat death of the universe.</p>"},{"location":"Miscellaneous/FAQs/#when-will-version-xxx-of-romm-or-any-of-the-romm-clientsappsplugins-be-released","title":"When will version <code>x.x.x</code> of RomM (or any of the RomM clients/apps/plugins) be released?","text":"<p>Same as above question.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/","title":"OIDC Setup With Authelia","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#oidc-setup-with-authelia","title":"OIDC Setup With Authelia","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#a-quick-rundown-of-the-technologies","title":"A quick rundown of the technologies","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#what-is-authelia","title":"What is Authelia?","text":"<p>Authelia is an open-source authentication and authorization server providing two-factor authentication and single sign-on (SSO) for your applications via a web portal. It acts as a companion for reverse proxies by allowing, denying, or redirecting requests. Authelia can be deployed alongside your other services to centralize identity management.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#what-is-oauth2","title":"What is OAuth2?","text":"<p>OAuth2 (Open Authorization 2.0) is an industry-standard protocol for authorization. It allows applications (clients) to gain limited access to user accounts on an HTTP service without sharing the user\u2019s credentials. Instead, it uses access tokens to facilitate secure interactions. OAuth2 is commonly used in scenarios where users need to authenticate via a third-party service.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#what-is-openid-connect-oidc","title":"What is OpenID Connect (OIDC)?","text":"<p>OIDC (OpenID Connect) is an identity layer built on top of OAuth2. While OAuth2 primarily handles authorization, OIDC adds authentication, enabling applications to verify a user\u2019s identity and obtain profile information. This makes OIDC suitable for SSO solutions, where user identity is central to access management.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#setting-up-a-provider-and-application-in-authelia","title":"Setting up a Provider and Application in Authelia","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#step-1-install-and-configure-authelia","title":"Step 1: Install and Configure Authelia","text":"<p>Before setting up a provider and app, ensure that Authelia is installed and running by following the getting started and OIDC provider guides.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#step-2-add-a-client","title":"Step 2: Add a client","text":"<p>First, in Authelia's <code>configuration.yml</code>, at <code>identity_providers</code> \u2192 <code>oidc</code> \u2192 <code>claims_policies</code> you'll need to add a Claims Policy if you do not already have one with the specified claims:</p> <pre><code># identity_providers:\n#   oidc:\nclaims_policies:\n  with_email: # You can name this however you want\n    id_token:\n      [\"email\", \"email_verified\", \"alt_emails\", \"preferred_username\", \"name\"]\n</code></pre> <p>To read more about claims_policies and why you need it for RomM, see this section in the Authelia docs.</p> <p>Then, in the same <code>configuration.yml</code>, under <code>identity_providers</code> \u2192 <code>oidc</code> \u2192 <code>clients</code>, add a new entry:</p> <ul> <li>A random <code>client_id</code> and <code>client_secret</code></li> <li>See the official recommendations on how to generate these.</li> <li><code>public</code> should be set to <code>false</code>.</li> <li><code>redirect_uris</code> should include your RomM instance's URL + <code>/api/oauth/openid</code> (e.g., <code>http://romm.host.local/api/oauth/openid</code>).</li> <li><code>claims_policy</code> is the name of the entry at claims_policies that you just added (or already had).</li> <li><code>scopes</code> includes <code>openid</code>, <code>email</code> and <code>profile</code>.</li> <li><code>token_endpoint_auth_method</code> should be set to <code>client_secret_basic</code>.</li> <li><code>userinfo_signed_response_alg</code> should be set to <code>none</code>.</li> </ul> <p>Refer to the official docs for more details.</p> <p>This entry should look like this:</p> <pre><code>#identity_providers:\n#  oidc:\n#    clients:\n- client_id: \"&lt;randomly_generated&gt;\" # read above for how generate\n  client_name: \"RomM\" # will be displayed in Authelia to users\n  client_secret: \"$pbkdf2-sha512$randomly_generated\" # read above for how generate\n  public: false\n  authorization_policy: \"two_factor\" # or one_factor, depending on your needs\n  grant_types:\n    - authorization_code\n  redirect_uris:\n    - \"http://romm.host.local/api/oauth/openid\"\n  claims_policy: \"with_email\"\n  scopes:\n    - \"openid\"\n    - \"email\"\n    - \"profile\"\n  userinfo_signed_response_alg: \"none\"\n  token_endpoint_auth_method: \"client_secret_basic\"\n</code></pre>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#step-3-configure-romm-environment-variables","title":"Step 3: Configure RomM Environment Variables","text":"<p>To enable OIDC authentication in RomM, you need to set the following environment variables:</p> <ul> <li><code>OIDC_ENABLED</code>: Set to <code>true</code> to enable OIDC authentication.</li> <li><code>OIDC_PROVIDER</code>: The lowercase name of the provider (<code>authelia</code>).</li> <li><code>OIDC_CLIENT_ID</code>: The client ID copied from the Authelia application.</li> <li><code>OIDC_CLIENT_SECRET</code>: The generated output from <code>Random Password</code>.</li> <li><code>OIDC_REDIRECT_URI</code>: The redirect URI configured in the Authelia provider, in the format <code>http://romm.host.local/api/oauth/openid</code>.</li> <li><code>OIDC_SERVER_APPLICATION_URL</code>: The base URL for you Authelia instance, e.g. <code>http://authelia.host.local</code>.</li> </ul>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#step-4-set-your-email-in-romm","title":"Step 4: Set your Email in RomM","text":"<p>In RomM, open your user profile and set your email address. This email has to match your user email in Authelia.</p> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authelia/#step-5-test-the-integration","title":"Step 5: Test the Integration","text":"<p>After configuring the environment variables, restart (or stop and remove) your RomM instance and navigate to the login page. You should see an option to log in using OIDC. Click on the OIDC button, and you'll be redirected to Authelia for authentication. Once authenticated, you'll be redirected back to RomM.</p> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/","title":"OIDC Setup With Authentik","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#oidc-setup-with-authentik","title":"OIDC Setup With Authentik","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#a-quick-rundown-of-the-technologies","title":"A quick rundown of the technologies","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#what-is-authentik","title":"What is Authentik?","text":"<p>Authentik is an open-source identity provider (IdP) designed to manage authentication, authorization, and user management across applications. It supports modern authentication protocols and provides tools to simplify integration, including single sign-on (SSO), multi-factor authentication (MFA), and auditing capabilities. Authentik can be deployed alongside your other services to centralize identity management.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#what-is-oauth2","title":"What is OAuth2?","text":"<p>OAuth2 (Open Authorization 2.0) is an industry-standard protocol for authorization. It allows applications (clients) to gain limited access to user accounts on an HTTP service without sharing the user\u2019s credentials. Instead, it uses access tokens to facilitate secure interactions. OAuth2 is commonly used in scenarios where users need to authenticate via a third-party service.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#what-is-openid-connect-oidc","title":"What is OpenID Connect (OIDC)?","text":"<p>OIDC (OpenID Connect) is an identity layer built on top of OAuth2. While OAuth2 primarily handles authorization, OIDC adds authentication, enabling applications to verify a user\u2019s identity and obtain profile information. This makes OIDC suitable for SSO solutions, where user identity is central to access management.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#setting-up-a-provider-and-application-in-authentik","title":"Setting up a Provider and Application in Authentik","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-1-install-and-configure-authentik","title":"Step 1: Install and Configure Authentik","text":"<p>Before setting up a provider and app, ensure that Authentik is installed and running by following the official installation guide..</p> <ol> <li>Access Authentik via its web interface.</li> <li>Log in as an administrator.</li> <li>Navigate to the \u201cAdmin Interface\u201d to configure the necessary components.</li> </ol> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-2-create-a-provider","title":"Step 2: Create a Provider","text":"<p>A provider in Authentik acts as the bridge between RomM and Authentik.</p> <ol> <li>Navigate to Providers:<ul> <li>Go to the \"Providers\" section in the Authentik admin interface.</li> </ul> </li> <li>Create a New Provider:<ul> <li>Click on \u201cCreate\u201d and choose the protocol (e.g., \u201cOIDC Provider\u201d).   </li> </ul> </li> <li>Select \"OAuth2/OpenID Provider\" </li> <li>Configure Provider Settings:<ul> <li>Name: Assign a unique name to the provider (e.g., \"RomM OIDC Provider\").</li> <li>Authorization flow: Select implicit consent.</li> <li>Redirect URIs: Add your RomM instance's URL + <code>/api/oauth/openid</code> (e.g., <code>http://romm.host.local/api/oauth/openid</code>).</li> </ul> </li> <li>Copy the Client ID and Secret:<ul> <li>You'll need these to set <code>OIDC_CLIENT_ID</code> and <code>OIDC_CLIENT_SECRET</code> in your RomM instance.   </li> </ul> </li> <li>Click Create.</li> </ol>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-3-register-an-application","title":"Step 3: Register an Application","text":"<p>An app in Authentik represents the external service (in our case RomM) that will use the provider for authentication.</p> <ol> <li>Navigate to Applications:<ul> <li>Go to the \"Applications\" section in the admin interface.   </li> </ul> </li> <li>Create a New Application:<ul> <li>Click on \u201cCreate\u201d and configure the app settings: - Name: Provide a recognizable name (e.g., \"RomM\"). - Slug: Create a unique identifier for the app (e.g., <code>romm</code>). - Provider: Link the app to the previously created provider, \"RomM OIDC Provider\".   </li> </ul> </li> <li>Click Create.</li> </ol>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-4-configure-romm-environment-variables","title":"Step 4: Configure RomM Environment Variables","text":"<p>To enable OIDC authentication in RomM, you need to set the following environment variables:</p> <ul> <li><code>OIDC_ENABLED</code>: Set to <code>true</code> to enable OIDC authentication.</li> <li><code>OIDC_PROVIDER</code>: The lowercase name of the provider (<code>authentik</code>).</li> <li><code>OIDC_CLIENT_ID</code>: The client ID copied from the Authentik application.</li> <li><code>OIDC_CLIENT_SECRET</code>: The client secret copied from the Authentik application.</li> <li><code>OIDC_REDIRECT_URI</code>: The redirect URI configured in the Authentik provider, in the format <code>http://romm.host.local/api/oauth/openid</code>.</li> <li><code>OIDC_SERVER_APPLICATION_URL</code>: The URL of the Authentik application, e.g., <code>http://authentik.host.local/application/o/romm</code>.</li> </ul>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-5-set-your-email-in-romm","title":"Step 5: Set your Email in RomM","text":"<p>In RomM, open your user profile and set your email address. This email has to match your user email in Authentik.</p> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-Authentik/#step-6-test-the-integration","title":"Step 6: Test the Integration","text":"<p>After configuring the environment variables, restart (or stop and remove) your RomM instance and navigate to the login page. You should see an option to log in using OIDC. Click on the OIDC button, and you'll be redirected to Authentik for authentication. Once authenticated, you'll be redirected back to RomM.</p> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/","title":"OIDC Setup With PocketID","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#oidc-setup-with-pocket-id","title":"OIDC Setup With Pocket ID","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#a-quick-rundown-of-the-technologies","title":"A quick rundown of the technologies","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#what-is-pocket-id","title":"What is Pocket ID?","text":"<p>Pocket ID is a simple OIDC provider that allows users to authenticate with their passkeys to your services.</p> <p>The goal of Pocket ID is to be a simple and easy-to-use. There are other self-hosted OIDC providers like Keycloak or ORY Hydra but they are often too complex for simple use cases.</p> <p>Additionally, what makes Pocket ID special is that it only supports passkey authentication, which means you don\u2019t need a password.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#what-is-oauth2","title":"What is OAuth2?","text":"<p>OAuth2 (Open Authorization 2.0) is an industry-standard protocol for authorization. It allows applications (clients) to gain limited access to user accounts on an HTTP service without sharing the user\u2019s credentials. Instead, it uses access tokens to facilitate secure interactions. OAuth2 is commonly used in scenarios where users need to authenticate via a third-party service.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#what-is-openid-connect-oidc","title":"What is OpenID Connect (OIDC)?","text":"<p>OIDC (OpenID Connect) is an identity layer built on top of OAuth2. While OAuth2 primarily handles authorization, OIDC adds authentication, enabling applications to verify a user\u2019s identity and obtain profile information. This makes OIDC suitable for SSO solutions, where user identity is central to access management.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#setting-up-a-client-in-pocket-id","title":"Setting up a client in Pocket ID","text":""},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#step-1-install-and-configure-pocket-id","title":"Step 1: Install and Configure Pocket ID","text":"<p>Before setting up the OIDC client, ensure that Pocket ID is installed and running by following the setup guide.</p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#step-2-add-a-client","title":"Step 2: Add a client","text":"<p>Once you have logged in and configured a PassKey you now need to create an OIDC client, this will let Pocket ID know about the application that needs to be configured, and will give you the relevant keys to add to the RomM compose file.</p> <ul> <li>Make sure within Application Configuration that \"Emails Verified\" is ticked, most OIDC apps will need this.</li> <li>Go to OIDC Client</li> <li>Click Add OIDC Client<ul> <li>Name: RomM</li> <li>Callback URLs: <code>https://{host}/api/oauth/openid</code></li> </ul> </li> <li>Click Save</li> <li>Stay on this page, you will be shown your client secret only THIS time.</li> </ul>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#step-3-configure-romm-environment-variables","title":"Step 3: Configure RomM Environment Variables","text":"<p>To enable OIDC authentication in RomM, you need to set the following environment variables:</p> <ul> <li><code>OIDC_ENABLED</code>: Set to <code>true</code> to enable OIDC authentication.</li> <li><code>OIDC_PROVIDER</code>: The lowercase name of the provider (<code>pocketid</code>).</li> <li><code>OIDC_CLIENT_ID</code>: The client ID copied from the Pocket ID application</li> <li><code>OIDC_CLIENT_SECRET</code>: The client secret that is showing within your Pocket ID application.</li> <li><code>OIDC_REDIRECT_URI</code>: The redirect URI configured in the Pocket ID provider, in the format <code>https://{host}/api/oauth/openid</code>.</li> <li><code>OIDC_SERVER_APPLICATION_URL</code>: The authorization URL for you Pocket ID instance, e.g. <code>https://id.host.local/authorize</code>.</li> </ul>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#step-4-set-your-email-in-romm","title":"Step 4: Set your Email in RomM","text":"<p>In RomM, open your user profile and set your email address. This email has to match your user email in Pocket ID.</p> <p></p>"},{"location":"OIDC-Guides/OIDC-Setup-With-PocketID/#step-5-test-the-integration","title":"Step 5: Test the Integration","text":"<p>After configuring the environment variables, restart (or stop and remove) your RomM instance and navigate to the login page. You should see an option to log in using OIDC. Click on the OIDC button, and you'll be redirected to Pocket ID for authentication. Once authenticated, you'll be redirected back to RomM.</p> <p></p>"},{"location":"Platforms-and-Players/Custom-Platforms/","title":"Custom Platforms","text":"<p>While RomM supports every platform listed in the Supported Platforms page, the list is not exhaustive, and you may have ROMs in your library for other platforms. To load those files into RomM, place them in a folder for each platform, and give it a name that's all lowercase, with <code>-</code> to separate words, and with no white spaces. For example, <code>pocket-challenge-v2</code> would map to <code>Pocket Challenge V2</code>, and display the default platform icon in the app.</p> <p>Furthermore, only a portion of the supported platforms have custom icons built-in. If your library has platforms that aren't listed in the platforms icons list, RomM will display a default fallback icon.</p> <p>If you'd like to load your own custom icons for missing platforms, you can mount <code>/var/www/html/assets/platforms</code> to some local folder and place all of your custom <code>.ico</code> platform icons in there. You'll also want to download the ones provided in this project and place them in the same folder. If you'd like to use your own icons for platforms already supported by RomM, just replace the file with another using the exact same name.</p> <p>The name of the <code>.ico</code> file should match the slug of the platform on IGDB. For example, the URL for the AmstradCPC is https://www.igdb.com/platforms/acpc, so the filename should be <code>acpc.ico</code>.</p> <p></p>"},{"location":"Platforms-and-Players/EmulatorJS-Player/","title":"EmulatorJS Player","text":"<p>EmulatorJS is a web-based emulator for various system; that is, it allows you to run old games in your web browser. It's based on <code>RetroArch</code> compiled with <code>Emscripten</code>, which is a toolchain for compiling C and C++ code to WebAssembly.</p> <p>Warning</p> <p>Due to a change by Apple in iOS 18.2, emulation is severely limited, and likely non-functional, on iOS 18.2-18.3 devices. This was fixed in iOS 18.4</p> <p>Warning</p> <p>PSP emulation with the PPSSPP core requires special setup with a reverse proxy, or launching Chrome browser with the <code>--disable-web-security</code> and <code>--enable-features=SharedArrayBuffer</code> flags, which WE STRONGLY DISCOURAGE as it disables important security features.</p> <p>Warning</p> <p>Emulation is a complex and resource-intensive process. As such, it may not work well in all browser, especially older or less powerful ones. If you're having trouble running a game, try using a different browser or device.</p>"},{"location":"Platforms-and-Players/EmulatorJS-Player/#loading-saves-and-states","title":"Loading saves and states","text":"<p>Our integration with EmulatorJS automates the process of loading and saving save files and save states. Before starting the game, select a save and/or state file to load (if one is available). Anytime you save the game (or create a save state), the save and state files stored with RomM will be updated, so there's no need to manually download or upload them.</p>"},{"location":"Platforms-and-Players/EmulatorJS-Player/#supported-systems","title":"Supported systems","text":"<p>Note that only the following systems are currently supported:</p> <ul> <li>3DO</li> <li>Amiga</li> <li>Arcade/MAME</li> <li>Atari 2600</li> <li>Atari 5200</li> <li>Atari 7800</li> <li>Atari Jaguar</li> <li>Atari Lynx</li> <li>Commodore 64</li> <li>ColecoVision</li> <li>Neo Geo Pocket</li> <li>Neo Geo Pocket Color</li> <li>Nintendo 64</li> <li>Nintendo Entertainment System (NES)</li> <li>Nintendo Family Computer (Famicom)</li> <li>Nintendo DS</li> <li>Game Boy</li> <li>Game Boy Color</li> <li>Game Boy Advance</li> <li>PC-FX</li> <li>PlayStation (PS)</li> <li>Sega 32X</li> <li>Sega CD</li> <li>Sega Game Gear</li> <li>Sega Master System</li> <li>Sega Genesis/Megadrive</li> <li>Sega Saturn</li> <li>Super Nintendo Entertainment System (SNES)</li> <li>Super Famicom</li> <li>TurboGraphx-16/PC Engine</li> <li>Virtual Boy</li> <li>WonderSwan</li> <li>WonderSwan Color</li> </ul>"},{"location":"Platforms-and-Players/RuffleRS-Player/","title":"RuffleRS Player","text":"<p>Ruffle is a web-based player for flash games. With flash now discontinued, this is the best way to play your flash collection in the browser.</p> <p>Important</p> <p>Ruffle will only play games stored in platform folders called <code>flash</code> or <code>browser</code>.</p>"},{"location":"Platforms-and-Players/Supported-Platforms/","title":"Supported Platforms","text":"<p>Below is a list of all supported platforms/systems/consoles and their respective folder names. The folder name is case-sensitive and must be used exactly as it appears in the list below.</p> Platform Name Folder Name IGDB MobyGames 1292 Advanced Programmable Video System <code>1292-advanced-programmable-video-system</code> IGDB MobyGames 3DO Interactive Multiplayer <code>3do</code> IGDB MobyGames ABC 80 <code>abc-80</code> MobyGames APF MP1000/Imagination Machine <code>apf</code> MobyGames AY-3-8500 <code>ay-3-8500</code> IGDB AY-3-8603 <code>ay-3-8603</code> IGDB AY-3-8605 <code>ay-3-8605</code> IGDB AY-3-8606 <code>ay-3-8606</code> IGDB AY-3-8607 <code>ay-3-8607</code> IGDB AY-3-8610 <code>ay-3-8610</code> IGDB AY-3-8710 <code>ay-3-8710</code> IGDB AY-3-8760 <code>ay-3-8760</code> IGDB Acorn Archimedes <code>acorn-archimedes</code> IGDB MobyGames Acorn Electron <code>acorn-electron</code> IGDB MobyGames Adventure Vision <code>adventure-vision</code> MobyGames AirConsole <code>airconsole</code> IGDB MobyGames Alice 32/90 <code>alice-3290</code> MobyGames Altair 680 <code>altair-680</code> MobyGames Altair 8800 <code>altair-8800</code> MobyGames Amazon Alexa <code>amazon-alexa</code> MobyGames Amazon Fire TV <code>amazon-fire-tv</code> IGDB MobyGames Amiga <code>amiga</code> IGDB MobyGames Amiga CD32 <code>amiga-cd32</code> IGDB MobyGames Amstrad CPC <code>acpc</code> IGDB MobyGames Amstrad PCW <code>amstrad-pcw</code> IGDB MobyGames Android <code>android</code> IGDB MobyGames Antstream <code>antstream</code> MobyGames Apple I <code>apple-i</code> MobyGames Apple II <code>appleii</code> IGDB MobyGames Apple IIGD <code>apple2gs</code> MobyGames Apple IIGS <code>apple-iigs</code> IGDB MobyGames Apple Pippin <code>apple-pippin</code> IGDB Arcade <code>arcade</code> IGDB MobyGames Arcadia 2001 <code>arcadia-2001</code> IGDB MobyGames Arduboy <code>arduboy</code> IGDB MobyGames Astral 2000 <code>astral-2000</code> MobyGames Atari 2600 <code>atari2600</code> IGDB MobyGames Atari 5200 <code>atari5200</code> IGDB MobyGames Atari 7800 <code>atari7800</code> IGDB MobyGames Atari 8-bit <code>atari8bit</code> IGDB MobyGames Atari Jaguar <code>jaguar</code> IGDB MobyGames Atari Jaguar CD <code>atari-jaguar-cd</code> IGDB Atari Lynx <code>lynx</code> IGDB MobyGames Atari ST/STE <code>atari-st</code> IGDB MobyGames Atari VCS <code>atari-vcs</code> MobyGames Atom <code>atom</code> MobyGames BBC Micro <code>bbcmicro</code> MobyGames BBC Microcomputer System <code>bbcmicro</code> IGDB MobyGames BREW <code>brew</code> MobyGames Bally Astrocade <code>astrocade</code> IGDB MobyGames BeOS <code>beos</code> MobyGames BlackBerry OS <code>blackberry</code> IGDB MobyGames Blacknut <code>blacknut</code> MobyGames Blu-ray Player <code>blu-ray-player</code> IGDB MobyGames Bubble <code>bubble</code> MobyGames CD-i <code>philips-cd-i</code> MobyGames CDC Cyber 70 <code>cdccyber70</code> IGDB CDTV <code>commodore-cdtv</code> MobyGames COSMAC <code>fred-cosmac</code> MobyGames CP/M <code>cpm</code> MobyGames Call-A-Computer time-shared mainframe computer system <code>call-a-computer</code> IGDB Camputers Lynx <code>camputers-lynx</code> MobyGames Casio Loopy <code>casio-loopy</code> IGDB MobyGames Casio PV-1000 <code>casio-pv-1000</code> MobyGames Casio Programmable Calculator <code>casio-programmable-calculator</code> MobyGames Champion 2711 <code>champion-2711</code> MobyGames Channel F <code>fairchild-channel-f</code> MobyGames ClickStart <code>clickstart</code> MobyGames Coleco Adam <code>colecoadam</code> MobyGames ColecoVision <code>colecovision</code> IGDB MobyGames Colour Genie <code>colour-genie</code> MobyGames Commodore 128 <code>c128</code> MobyGames Commodore 16 <code>c16</code> IGDB MobyGames Commodore C64/128/MAX <code>c64</code> IGDB MobyGames Commodore CDTV <code>commodore-cdtv</code> IGDB MobyGames Commodore PET <code>cpet</code> IGDB MobyGames Commodore PET/CBM <code>cpet</code> MobyGames Commodore Plus/4 <code>c-plus-4</code> IGDB MobyGames Commodore VIC-20 <code>vic-20</code> IGDB MobyGames Compal 80 <code>compal-80</code> MobyGames Compucolor I <code>compucolor-i</code> MobyGames Compucolor II <code>compucolor-ii</code> MobyGames Compucorp Programmable Calculator <code>compucorp-programmable-calculator</code> MobyGames CreatiVision <code>creativision</code> MobyGames Cybervision <code>cybervision</code> MobyGames DOS <code>dos</code> IGDB MobyGames DVD Player <code>dvd-player</code> IGDB MobyGames Danger OS <code>danger-os</code> MobyGames Dedicated console <code>dedicated-console</code> MobyGames Dedicated handheld <code>dedicated-handheld</code> MobyGames Didj <code>didj</code> MobyGames DoJa <code>doja</code> MobyGames Donner Model 30 <code>donner30</code> IGDB Dragon 32/64 <code>dragon-32-slash-64</code> IGDB MobyGames Dreamcast <code>dc</code> IGDB MobyGames ECD Micromind <code>ecd-micromind</code> MobyGames EDSAC <code>edsac--1</code> IGDB Electron <code>acorn-electron</code> MobyGames Enterprise <code>enterprise</code> MobyGames Epoch Cassette Vision <code>epoch-cassette-vision</code> IGDB MobyGames Epoch Game Pocket Computer <code>epoch-game-pocket-computer</code> MobyGames Epoch Super Cassette Vision <code>epoch-super-cassette-vision</code> IGDB MobyGames Evercade <code>evercade</code> IGDB MobyGames ExEn <code>exen</code> MobyGames Exelvision <code>exelvision</code> MobyGames Exidy Sorcerer <code>exidy-sorcerer</code> IGDB MobyGames FM Towns <code>fm-towns</code> IGDB MobyGames FM-7 <code>fm-7</code> IGDB MobyGames Fairchild Channel F <code>fairchild-channel-f</code> IGDB MobyGames Family Computer <code>famicom</code> IGDB Family Computer Disk System <code>fds</code> IGDB Feature phone <code>mobile-custom</code> MobyGames Ferranti Nimrod Computer <code>nimrod</code> IGDB Fire TV <code>amazon-fire-tv</code> MobyGames Freebox <code>freebox</code> MobyGames G-cluster <code>g-cluster</code> MobyGames GIMINI <code>gimini</code> MobyGames GNEX <code>gnex</code> MobyGames GP2X <code>gp2x</code> MobyGames GP2X Wiz <code>gp2x-wiz</code> MobyGames GP32 <code>gp32</code> MobyGames GVM <code>gvm</code> MobyGames Galaksija <code>galaksija</code> MobyGames Gamate <code>gamate</code> IGDB Game &amp; Watch <code>g-and-w</code> IGDB Game Boy <code>gb</code> IGDB MobyGames Game Boy Advance <code>gba</code> IGDB MobyGames Game Boy Color <code>gbc</code> IGDB MobyGames Game Gear <code>gamegear</code> MobyGames Game Wave <code>game-wave</code> MobyGames Game.Com <code>game-dot-com</code> MobyGames Game.com <code>game-dot-com</code> IGDB MobyGames GameStick <code>gamestick</code> MobyGames Gear VR <code>gear-vr</code> IGDB Genesis/Mega Drive <code>genesis-slash-megadrive</code> MobyGames Gizmondo <code>gizmondo</code> IGDB MobyGames Gloud <code>gloud</code> MobyGames Glulx <code>glulx</code> MobyGames Google Stadia <code>stadia</code> IGDB MobyGames HD DVD Player <code>hd-dvd-player</code> MobyGames HP 2100 <code>hp2100</code> IGDB HP 3000 <code>hp3000</code> IGDB HP 9800 <code>hp-9800</code> MobyGames HP Programmable Calculator <code>hp-programmable-calculator</code> MobyGames Handheld Electronic LCD <code>handheld-electronic-lcd</code> IGDB Heath/Zenith H8/H89 <code>heathzenith</code> MobyGames Heathkit H11 <code>heathkit-h11</code> MobyGames Hitachi S1 <code>hitachi-s1</code> MobyGames Hugo <code>hugo</code> MobyGames Hyper Neo Geo 64 <code>hyper-neo-geo-64</code> IGDB HyperScan <code>hyperscan</code> IGDB MobyGames IBM 5100 <code>ibm-5100</code> MobyGames Ideal-Computer <code>ideal-computer</code> MobyGames Intel 8008 <code>intel-8008</code> MobyGames Intel 8080 <code>intel-8080</code> MobyGames Intel 8086 / 8088 <code>intel-8086</code> MobyGames Intellivision <code>intellivision</code> IGDB MobyGames Intellivision Amico <code>intellivision-amico</code> IGDB Interact Model One <code>interact-model-one</code> MobyGames Interton Video 2000 <code>interton-video-2000</code> MobyGames Interton VC 4000 <code>vc-4000</code> IGDB J2ME <code>j2me</code> MobyGames Jolt <code>jolt</code> MobyGames Jupiter Ace <code>jupiter-ace</code> MobyGames KIM-1 <code>kim-1</code> MobyGames KaiOS <code>kaios</code> MobyGames Kindle Classic <code>kindle</code> MobyGames Laser 200 <code>laser200</code> MobyGames LaserActive <code>laseractive</code> MobyGames LeapTV <code>leaptv</code> IGDB MobyGames Leapster <code>leapster</code> IGDB MobyGames Leapster Explorer/LeadPad Explorer <code>leapster-explorer-slash-leadpad-explorer</code> IGDB MobyGames Leapster Explorer/LeapPad Explorer <code>leapster-explorer-slash-leadpad-explorer</code> MobyGames Legacy Computer <code>legacy-computer</code> IGDB Legacy Mobile Device <code>mobile</code> IGDB Linux <code>linux</code> IGDB MobyGames Luna <code>luna</code> MobyGames MOS Technology 6502 <code>mos-technology-6502</code> MobyGames MRE <code>mre</code> MobyGames MSX <code>msx</code> IGDB MobyGames MSX2 <code>msx2</code> IGDB Mac <code>mac</code> IGDB MobyGames Macintosh <code>mac</code> MobyGames Maemo <code>maemo</code> MobyGames Mainframe <code>mainframe</code> MobyGames Matsushita/Panasonic JR <code>matsushitapanasonic-jr</code> MobyGames Mattel Aquarius <code>mattel-aquarius</code> MobyGames MeeGo <code>meego</code> MobyGames Mega Duck/Cougar Boy <code>mega-duck-slash-cougar-boy</code> IGDB Memotech MTX <code>memotech-mtx</code> MobyGames Meritum <code>meritum</code> MobyGames Meta Quest 2 <code>meta-quest-2</code> IGDB Meta Quest 3 <code>meta-quest-3</code> IGDB Microbee <code>microbee</code> MobyGames Microtan 65 <code>microtan-65</code> MobyGames Microvision <code>microvision--1</code> IGDB MobyGames Mophun <code>mophun</code> MobyGames Motorola 6800 <code>motorola-6800</code> MobyGames Motorola 68k <code>motorola-68k</code> MobyGames N-Gage <code>ngage</code> IGDB MobyGames N-Gage (service) <code>ngage2</code> MobyGames NEC PC-6000 Series <code>nec-pc-6000-series</code> IGDB Nascom <code>nascom</code> MobyGames Neo Geo <code>neogeoaes</code> MobyGames Neo Geo AES <code>neogeoaes</code> IGDB MobyGames Neo Geo CD <code>neo-geo-cd</code> IGDB MobyGames Neo Geo MVS <code>neogeomvs</code> IGDB MobyGames Neo Geo Pocket <code>neo-geo-pocket</code> IGDB MobyGames Neo Geo Pocket Color <code>neo-geo-pocket-color</code> IGDB MobyGames Neo Geo X <code>neo-geo-x</code> MobyGames New Nintendo 3DS <code>new-nintendo-3ds</code> IGDB MobyGames NewBrain <code>newbrain</code> MobyGames Newton <code>newton</code> MobyGames Nintendo 3DS <code>3ds</code> IGDB MobyGames Nintendo 64 <code>n64</code> IGDB MobyGames Nintendo 64DD <code>64dd</code> IGDB Nintendo DS <code>nds</code> IGDB MobyGames Nintendo DSi <code>nintendo-dsi</code> IGDB MobyGames Nintendo Entertainment System <code>nes</code> IGDB MobyGames Nintendo GameCube <code>ngc</code> IGDB MobyGames Nintendo PlayStation <code>nintendo-playstation</code> IGDB Nintendo Switch <code>switch</code> IGDB MobyGames North Star <code>northstar</code> MobyGames Noval 760 <code>noval-760</code> MobyGames Nuon <code>nuon</code> IGDB MobyGames OOParts <code>ooparts</code> IGDB MobyGames OS/2 <code>os2</code> MobyGames Oculus Go <code>oculus-go</code> IGDB MobyGames Oculus Quest <code>oculus-quest</code> IGDB MobyGames Oculus Rift <code>oculus-rift</code> IGDB Odyssey <code>odyssey--1</code> IGDB MobyGames Odyssey 2/Videopac G7000 <code>odyssey-2-slash-videopac-g7000</code> IGDB MobyGames Ohio Scientific <code>ohio-scientific</code> MobyGames OnLive Game System <code>onlive-game-system</code> IGDB MobyGames Orao <code>orao</code> MobyGames Oric <code>oric</code> MobyGames Ouya <code>ouya</code> IGDB MobyGames PC (Microsoft Windows) <code>win</code> IGDB MobyGames PC Booter <code>pc-booter</code> MobyGames PC Engine SuperGrafx <code>supergrafx</code> IGDB MobyGames PC-50X Family <code>pc-50x-family</code> IGDB PC-6001 <code>pc-6001</code> MobyGames PC-8000 <code>pc-8000</code> MobyGames PC-8800 Series <code>pc-8800-series</code> IGDB MobyGames PC-9800 Series <code>pc-9800-series</code> IGDB MobyGames PC-FX <code>pc-fx</code> IGDB MobyGames PDP-1 <code>pdp1</code> IGDB PDP-10 <code>pdp10</code> IGDB PDP-11 <code>pdp11</code> IGDB PDP-8 <code>pdp-8--1</code> IGDB PICO <code>pico</code> MobyGames PLATO <code>plato--1</code> IGDB PS Vita <code>psvita</code> MobyGames Palm OS <code>palm-os</code> IGDB MobyGames Panasonic Jungle <code>panasonic-jungle</code> IGDB Panasonic M2 <code>panasonic-m2</code> IGDB Pandora <code>pandora</code> MobyGames Pebble <code>pebble</code> MobyGames Philips CD-i <code>philips-cd-i</code> IGDB MobyGames Philips VG 5000 <code>philips-vg-5000</code> MobyGames Photo CD <code>photocd</code> MobyGames Pippin <code>pippin</code> MobyGames PlayStation <code>ps</code> IGDB MobyGames PlayStation 2 <code>ps2</code> IGDB MobyGames PlayStation 3 <code>ps3</code> IGDB MobyGames PlayStation 4 <code>ps4--1</code> IGDB MobyGames PlayStation 5 <code>ps5</code> IGDB MobyGames PlayStation Now <code>playstation-now</code> MobyGames PlayStation Portable <code>psp</code> IGDB MobyGames PlayStation VR <code>psvr</code> IGDB PlayStation VR2 <code>psvr2</code> IGDB PlayStation Vita <code>psvita</code> IGDB MobyGames Playdate <code>playdate</code> IGDB MobyGames Playdia <code>playdia</code> IGDB MobyGames Plex Arcade <code>plex-arcade</code> MobyGames Plug &amp; Play <code>plug-and-play</code> IGDB PocketStation <code>pocketstation</code> IGDB Pokitto <code>pokitto</code> MobyGames Pok\u00e9mon mini <code>pokemon-mini</code> IGDB MobyGames Poly-88 <code>poly-88</code> MobyGames R-Zone <code>r-zone</code> IGDB RCA Studio II <code>rca-studio-ii</code> MobyGames Research Machines 380Z <code>research-machines-380z</code> MobyGames Roku <code>roku</code> MobyGames SAM Coup\u00e9 <code>sam-coupe</code> MobyGames SC/MP <code>scmp</code> MobyGames SD-200/270/290 <code>sd-200270290</code> MobyGames SDS Sigma 7 <code>sdssigma7</code> IGDB SEGA CD <code>segacd</code> MobyGames SEGA Saturn <code>saturn</code> MobyGames SG-1000 <code>sg1000</code> IGDB SK-VM <code>sk-vm</code> MobyGames SMC-777 <code>smc-777</code> MobyGames SRI-500/1000 <code>sri-5001000</code> MobyGames SWTPC 6800 <code>swtpc-6800</code> MobyGames Satellaview <code>satellaview</code> IGDB Sega 32X <code>sega32</code> IGDB MobyGames Sega CD <code>segacd</code> IGDB MobyGames Sega Game Gear <code>gamegear</code> IGDB MobyGames Sega Master System/Mark III <code>sms</code> IGDB MobyGames Sega Mega Drive/Genesis <code>genesis-slash-megadrive</code> IGDB MobyGames Sega Pico <code>sega-pico</code> IGDB MobyGames Sega Saturn <code>saturn</code> IGDB MobyGames Sharp MZ-2200 <code>sharp-mz-2200</code> IGDB Sharp MZ-80B/2000/2500 <code>sharp-mz-80b20002500</code> MobyGames Sharp MZ-80K/700/800/1500 <code>sharp-mz-80k7008001500</code> MobyGames Sharp X1 <code>x1</code> IGDB MobyGames Sharp X68000 <code>sharp-x68000</code> IGDB MobyGames Sharp Zaurus <code>sharp-zaurus</code> MobyGames Signetics 2650 <code>signetics-2650</code> MobyGames Sinclair QL <code>sinclair-ql</code> IGDB MobyGames Sinclair ZX81 <code>sinclair-zx81</code> IGDB MobyGames Socrates <code>socrates</code> MobyGames Sol-20 <code>sol-20</code> IGDB MobyGames Sord M5 <code>sord-m5</code> MobyGames Spectravideo <code>spectravideo</code> MobyGames Super A'can <code>super-acan</code> MobyGames Super Famicom <code>sfam</code> IGDB Super Nintendo Entertainment System <code>snes</code> IGDB MobyGames Super Vision 8000 <code>super-vision-8000</code> MobyGames Supervision <code>supervision</code> MobyGames Sure Shot HD <code>sure-shot-hd</code> MobyGames SwanCrystal <code>swancrystal</code> IGDB Symbian <code>symbian</code> MobyGames TADS <code>tads</code> MobyGames TI Programmable Calculator <code>ti-programmable-calculator</code> MobyGames TI-99/4A <code>ti-994a</code> MobyGames TIM <code>tim</code> MobyGames TRS-80 <code>trs-80</code> IGDB MobyGames TRS-80 Color Computer <code>trs-80-color-computer</code> IGDB MobyGames TRS-80 MC-10 <code>trs-80-mc-10</code> MobyGames TRS-80 Model 100 <code>trs-80-model-100</code> MobyGames Taito X-55 <code>taito-x-55</code> MobyGames Tapwave Zodiac <code>zod</code> IGDB Tatung Einstein <code>tatung-einstein</code> IGDB MobyGames Tektronix 4050 <code>tektronix-4050</code> MobyGames Tele-Spiel ES-2201 <code>tele-spiel</code> MobyGames Telstar Arcade <code>telstar-arcade</code> MobyGames Terebikko / See 'n Say Video Phone <code>terebikko-slash-see-n-say-video-phone</code> IGDB Terminal <code>terminal</code> MobyGames Texas Instruments TI-99 <code>ti-99</code> IGDB MobyGames Thomson MO5 <code>thomson-mo5</code> IGDB MobyGames Thomson TO <code>thomson-to</code> MobyGames Tiki 100 <code>tiki-100</code> MobyGames Timex Sinclair 2068 <code>timex-sinclair-2068</code> MobyGames Tizen <code>tizen</code> MobyGames Tomahawk F1 <code>tomahawk-f1</code> MobyGames Tomy Tutor <code>tomy-tutor</code> MobyGames Triton <code>triton</code> MobyGames TurboGrafx CD <code>turbografx-16-slash-pc-engine-cd</code> MobyGames TurboGrafx-16 <code>turbografx16--1</code> MobyGames TurboGrafx-16/PC Engine <code>turbografx16--1</code> IGDB MobyGames Turbografx-16/PC Engine CD <code>turbografx-16-slash-pc-engine-cd</code> IGDB MobyGames V.Flash <code>vflash</code> MobyGames V.Smile <code>vsmile</code> IGDB MobyGames VIS <code>vis</code> MobyGames Vectrex <code>vectrex</code> IGDB MobyGames Versatile <code>versatile</code> MobyGames VideoBrain <code>videobrain</code> MobyGames Videopac+ G7400 <code>videopac-g7400</code> MobyGames Virtual Boy <code>virtualboy</code> IGDB MobyGames Virtual Console <code>vc</code> IGDB Visual Memory Unit / Visual Memory System <code>visual-memory-unit-slash-visual-memory-system</code> IGDB WIPI <code>wipi</code> MobyGames Wang 2200 <code>wang2200</code> MobyGames Watara/QuickShot Supervision <code>watara-slash-quickshot-supervision</code> IGDB Web browser <code>browser</code> IGDB MobyGames Wii <code>wii</code> IGDB MobyGames Wii U <code>wiiu</code> IGDB MobyGames Windows <code>win</code> MobyGames Windows 3.x <code>win3x</code> MobyGames Windows Apps <code>windows-apps</code> MobyGames Windows Mobile <code>windows-mobile</code> IGDB MobyGames Windows Phone <code>winphone</code> IGDB MobyGames WonderSwan <code>wonderswan</code> IGDB MobyGames WonderSwan Color <code>wonderswan-color</code> IGDB MobyGames XaviXPORT <code>xavixport</code> MobyGames Xbox <code>xbox</code> IGDB MobyGames Xbox 360 <code>xbox360</code> IGDB MobyGames Xbox Cloud Gaming <code>xboxcloudgaming</code> MobyGames Xbox One <code>xboxone</code> IGDB MobyGames Xbox Series X <code>series-x</code> IGDB MobyGames Xerox Alto <code>xerox-alto</code> MobyGames Z-machine <code>z-machine</code> MobyGames ZX Spectrum <code>zxs</code> IGDB ZX Spectrum Next <code>zx-spectrum-next</code> MobyGames ZX80 <code>zx80</code> MobyGames ZX81 <code>sinclair-zx81</code> MobyGames Zeebo <code>zeebo</code> IGDB MobyGames Zilog Z80 <code>z80</code> MobyGames Zilog Z8000 <code>zilog-z8000</code> MobyGames Zodiac <code>zodiac</code> MobyGames Zune <code>zune</code> MobyGames bada <code>bada</code> MobyGames digiBlast <code>digiblast</code> MobyGames iOS <code>ios</code> IGDB MobyGames iPad <code>ipad</code> MobyGames iPod Classic <code>ipod-classic</code> MobyGames iiRcade <code>iircade</code> MobyGames tvOS <code>tvos</code> MobyGames visionOS <code>visionos</code> IGDB watchOS <code>watchos</code> MobyGames webOS <code>webos</code> MobyGames"},{"location":"System-Setup/Synology-Setup-Guide/","title":"Synology Setup","text":""},{"location":"System-Setup/Synology-Setup-Guide/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes you're familiar with Docker and have basic knowledge of server management. You'll need:</p> <ul> <li>A Synology NAS or similar server</li> <li>Docker installed</li> <li>Basic command line knowledge</li> <li>Access to manage network settings</li> </ul>"},{"location":"System-Setup/Synology-Setup-Guide/#setup-process","title":"Setup Process","text":""},{"location":"System-Setup/Synology-Setup-Guide/#1-folder-structure-setup","title":"1. Folder Structure Setup","text":""},{"location":"System-Setup/Synology-Setup-Guide/#rom-storage-folders","title":"ROM Storage Folders","text":"<p>Create the following directory structure for game assets and configuration:</p> <pre><code>mkdir -p /volume1/data/media/games/assets\nmkdir -p /volume1/data/media/games/config\n</code></pre>"},{"location":"System-Setup/Synology-Setup-Guide/#rom-library-structure","title":"ROM Library Structure","text":"<p>RomM requires a very specific folder structure for rom files:</p> <pre><code>mkdir -p /volume1/data/media/games/library/roms\nmkdir -p /volume1/data/media/games/library/bios\n</code></pre> <p>Note: For supported platforms and their specific folder names, refer to the official RomM wiki.</p>"},{"location":"System-Setup/Synology-Setup-Guide/#docker-data-folders","title":"Docker Data Folders","text":"<p>Create these folders for project and container data:</p> <pre><code>mkdir -p /volume1/docker/romm-project/\nmkdir -p /volume1/docker/romm/resources\nmkdir -p /volume1/docker/romm/redis-data\nmkdir -p /volume1/docker/mariadb-romm\n</code></pre>"},{"location":"System-Setup/Synology-Setup-Guide/#2-network-bridge-setup","title":"2. Network Bridge Setup","text":"<p>Create a new network bridge named <code>rommbridge</code> following standard Docker networking practices. You can use this guide for reference.</p>"},{"location":"System-Setup/Synology-Setup-Guide/#3-key-generation","title":"3. Key Generation","text":""},{"location":"System-Setup/Synology-Setup-Guide/#authentication-key","title":"Authentication Key","text":"<p>Generate your authentication key using:</p> <pre><code>openssl rand -hex 32\n&gt; 03a054b6ca27e0107c5eed552ea66bacd9f3a2a8a91e7595cd462a593f9ecd09\n</code></pre> <p>Save the output - you'll need it for the <code>ROMM_AUTH_SECRET_KEY</code> in your configuration.</p>"},{"location":"System-Setup/Synology-Setup-Guide/#api-integration-setup","title":"API Integration Setup","text":"<p>RomM currently supports 3 metadata sources: IGDB, MobyGames and SteamGridDB. Follow the dedicated wiki page for API key generation to set up your API keys. We recommend setting up IGDG at the minimum.</p>"},{"location":"System-Setup/Synology-Setup-Guide/#4-mariadb-configuration","title":"4. MariaDB Configuration","text":"<p>Important</p> <ul> <li>This guide uses a dedicated MariaDB container for RomM, but you can use an existing MariaDB instance if preferred</li> <li>We're using MariaDB version 10.7 for compatibility</li> <li>The container uses port 3306 internally, mapped to 3309 externally</li> <li>A simplified health check is implemented for stability</li> </ul>"},{"location":"System-Setup/Synology-Setup-Guide/#5-docker-compose-configuration","title":"5. Docker Compose Configuration","text":"<p>Create a <code>docker-compose.yml</code> file with the following content:</p> Example Docker Compose <pre><code>version: \"3\"\n\nvolumes:\n    mysql_data:\n\nservices:\n    romm:\n        image: rommapp/romm:latest\n        container_name: romm\n        restart: unless-stopped\n        environment:\n            - DB_HOST=romm-db\n            - DB_NAME=romm # Should match MARIADB_DATABASE in mariadb\n            - DB_USER=romm-user # Should match MARIADB_USER in mariadb\n            - DB_PASSWD= # Should match MARIADB_PASSWORD in mariadb\n            - ROMM_AUTH_SECRET_KEY= # Generate a key with `openssl rand -hex 32`\n            - IGDB_CLIENT_ID= # Generate an ID and SECRET in IGDB\n            - IGDB_CLIENT_SECRET= # https://api-docs.igdb.com/#account-creation\n            - MOBYGAMES_API_KEY= # https://www.mobygames.com/info/api/\n            - STEAMGRIDDB_API_KEY= # https://github.com/rommapp/romm/wiki/Generate-API-Keys#steamgriddb\n        volumes:\n            - /volume1/docker/romm/resources:/romm/resources\n            - /volume1/docker/romm/redis-data:/redis-data\n            - /volume1/data/media/games/library:/romm/library\n            - /volume1/data/media/games/assets:/romm/assets\n            - /volume1/data/media/games/config:/romm/config\n        ports:\n            - 7676:8080\n        network_mode: rommbridge\n        depends_on:\n            romm-db:\n                condition: service_healthy\n                restart: true\n\n    mariadb-romm:\n        image: mariadb:latest\n        container_name: mariadb-romm\n        restart: unless-stopped\n        environment:\n            - MARIADB_ROOT_PASSWORD= # Use a unique, secure password\n            - MARIADB_DATABASE=romm\n            - MARIADB_USER=romm-user\n            - MARIADB_PASSWORD=\n        ports:\n            - 3309:3306\n        network_mode: rommbridge\n        volumes:\n            - /volume1/docker/mariadb-romm:/var/lib/mysql\n        healthcheck:\n            test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n            start_period: 30s\n            start_interval: 10s\n            interval: 10s\n            timeout: 5s\n            retries: 5\n</code></pre>"},{"location":"System-Setup/Synology-Setup-Guide/#6-initial-launch","title":"6. Initial Launch","text":"<ol> <li>Start the containers using Docker Compose</li> <li>Be patient! The container can take a few minutes to setup on first launch</li> <li>Monitor progress through container logs</li> <li>Access RomM through your browser at <code>http://your-server-ip:7676</code></li> </ol> <p>Important</p> <ul> <li>Replace placeholder values (UIDs, GIDs, passwords, API keys) with your own</li> <li>Ensure proper permissions on all created directories</li> <li>Back up your configuration after successful setup</li> <li>Monitor logs during initial startup for any errors</li> </ul>"},{"location":"System-Setup/Synology-Setup-Guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the web interface shows \"page not found,\" wait for initial setup to complete</li> <li>For database connection issues, verify MariaDB container health status</li> <li>Check logs for both containers if experiencing issues</li> <li>Ensure all volumes are properly mounted with correct permissions</li> </ul>"},{"location":"System-Setup/Synology-Setup-Guide/#contributing","title":"Contributing","text":"<p>This guide is an abridged version of ChopFoo's original guide. If you have any suggestions or improvements, please submit a pull request to the RomM wiki.</p>"},{"location":"System-Setup/Tinfoil-Integration/","title":"Tinfoil Integration","text":"<p>This will help you configure the Tinfoil integration for your Switch to work with your RomM library.</p> <p></p>"},{"location":"System-Setup/Tinfoil-Integration/#prepare","title":"Prepare","text":"<p>Please note down the following in order to make this as smooth as possible, as well as some pre-reqs:</p> <ul> <li>RomM updated to at least 3.5.0</li> <li>Add <code>DISABLE_DOWNLOAD_ENDPOINT_AUTH=true</code> to your environment variables and restart the container</li> <li>The URL you use to access RomM<ul> <li>This can either be <code>http</code> or <code>https</code></li> <li>The system will prefer local access though to avoid reverse proxy issues</li> </ul> </li> <li>Feed URL: <code>/api/tinfoil/feed</code></li> <li>The username and password you use to login to RomM</li> </ul>"},{"location":"System-Setup/Tinfoil-Integration/#configure","title":"Configure","text":"<p>Now it's time to configure your switch - Please follow the steps, this will assume you have Tinfoil installed and know how to use the basic functions of it.</p> <ol> <li>Open Tinfoil and go to File Browser</li> <li>Scroll over to the selection and press - in order to access the new menu.</li> <li>Enter these Options<ul> <li>Protocol - <code>http</code> or <code>https</code> depending on your connection</li> <li>Host - Host of your RomM instance</li> <li>Port - Port of your RomM Instance</li> <li>Path - /api/tinfoil/feed</li> <li>Username - Username of your RomM instance</li> <li>Password - Password of your RomM instance</li> <li>Title - Free text title, make it whatever you want.</li> <li>Enabled - Yes</li> </ul> </li> <li>Press X to save</li> <li>Now close out of Tinfoil and go back in, so it can scan the TitleIDs - if everything is correct you will have this custom <code>motd</code>:    \" RomM Switch Library\"</li> </ol> <p>Now you will be able to see the files in \"New Games\" tab of Tinfoil OR you can access it within the \"File Browser\" section that you setup earlier.</p> <p></p>"},{"location":"System-Setup/Tinfoil-Integration/#additional","title":"Additional","text":"<p>It didn't pull anything through to \"New Games\" and has not parsed any information about the titles?!</p> <p>That would be because the filename it has tried to pull had no TitleID (Improvement to RomM coming soon )</p> <p>Make sure the filename has the TitleID within the title like this: </p> <p>Once this is done, the next time Tinfoil is opened it is always parsed and re-scanned.</p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/","title":"TrueNAS Setup","text":""},{"location":"System-Setup/TrueNAS-Setup-Guide/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes you're familiar with Docker and have basic knowledge of TrueNAS. You'll need:</p> <ul> <li>A running TrueNAS installation</li> <li>Your games setup in the required folder structure</li> </ul>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#setup-process","title":"Setup Process","text":""},{"location":"System-Setup/TrueNAS-Setup-Guide/#install-through-the-truenas-app-catalog-recommended","title":"Install through the TrueNAS App Catalog (Recommended)","text":""},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-1-navigate-to-romm-app","title":"Step 1: Navigate to RomM app","text":"<p>Navigate to the App Catalog via Apps (Left navigation bar) -&gt; Discover Apps -&gt; RomM -&gt; Install</p> <p></p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-2-installation-configuration","title":"Step 2: Installation configuration","text":"<p>Step through the installation UI. You will need to supply various credentials per the Quick Start Guide. Most of the default values will work.</p> <p>Note: You will likely want to set certain Storage Configurations to a Dataset within TrueNAS, such as your RomM Library and Assets storage. If you do this, ensure you provide ACL access to the UserID specified above (default: 568, apps user).</p> <p></p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-3-save-your-configuration","title":"Step 3: Save your configuration","text":"<p>Save, and you're done! If the app will not boot, refer to Troubleshooting or head on over to the Discord.</p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#install-via-yaml","title":"Install via YAML","text":"<p>This installation path should only be used in the event that there is a bug with installing through the App Catalog, or you wish to have more flexibility than is provided by the installation UI.</p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-1-navigate-to-yaml-install","title":"Step 1: Navigate to YAML install","text":"<p>Navigate to the <code>Install via YAML</code> page via Apps (Left navigation bar) -&gt; Discover Apps -&gt; Install via YAML</p> <p></p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-2-paste-in-the-following-yml","title":"Step 2: Paste in the following YML","text":"<p>Replace any empty values with credentials you've created per the Quick Start Guide.</p> Example Docker Compose <pre><code>version: \"3\"\n\nvolumes:\n    mysql_data:\n    romm_redis_data:\n\nservices:\n    romm:\n        image: rommapp/romm:latest\n        container_name: romm\n        restart: unless-stopped\n        user: 568:568\n        environment:\n            - DB_HOST=romm-db\n            - DB_NAME=romm # Should match MARIADB_DATABASE in mariadb\n            - DB_USER=romm-user # Should match MARIADB_USER in mariadb\n            - DB_PASSWD= # Should match MARIADB_PASSWORD in mariadb\n            - ROMM_AUTH_SECRET_KEY= # Generate a key with `openssl rand -hex 32`\n            - IGDB_CLIENT_ID= # Generate an ID and SECRET in IGDB\n            - IGDB_CLIENT_SECRET= # https://api-docs.igdb.com/#account-creation\n            - MOBYGAMES_API_KEY= # https://www.mobygames.com/info/api/\n            - STEAMGRIDDB_API_KEY= # https://github.com/rommapp/romm/wiki/Generate-API-Keys#steamgriddb\n        volumes: # Any /mnt paths may optionally be replaced with a docker volume\n            - /mnt/tank/truenas/resources:/romm/resources # Replace /mnt...: file path with your own data structure\n            - romm_redis_data:/romm/redis-data # Docker will manage this volume\n            - /mnt/tank/truenas/roms:/romm/library # Replace /mnt...: file path with your own data structure\n            - /mnt/tank/truenas/assets:/romm/assets # Replace /mnt...: file path with your own data structure\n            - /mnt/tank/truenas/config:/romm/config # Replace /mnt...: file path with your own data structure\n        ports:\n            - 31100:8080\n        depends_on:\n            romm-db:\n                condition: service_healthy\n                restart: true\n        deploy:\n            resources:\n                limits:\n                    cpus: \"2.0\"\n                    memory: 4g\n\n    romm-db:\n        image: mariadb:latest\n        container_name: romm-db\n        restart: unless-stopped\n        environment:\n            - MARIADB_ROOT_PASSWORD= # Use a unique, secure password\n            - MARIADB_DATABASE=romm\n            - MARIADB_USER=romm-user\n            - MARIADB_PASSWORD=\n        volumes:\n            - mysql_data:/var/lib/mysql\n        healthcheck:\n            test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n            start_period: 30s\n            start_interval: 10s\n            interval: 10s\n            timeout: 5s\n            retries: 5\n</code></pre>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#step-3-save-the-configuration","title":"Step 3: Save the configuration","text":"<p>Save, and you're done! If the app will not boot, refer to Troubleshooting or head on over to the Discord.</p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"System-Setup/TrueNAS-Setup-Guide/#general","title":"General","text":"<ul> <li>Ensure you have replaced empty values (UIDs, GIDs, passwords, API keys) with your own</li> <li>Ensure proper permissions are applied within TrueNAS</li> <li>Monitor logs via the app bash terminal during for any errors if the app is encountering issues</li> </ul>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#specific-issues","title":"Specific Issues","text":""},{"location":"System-Setup/TrueNAS-Setup-Guide/#permissions-issues-inside-the-docker-image","title":"Permissions issues inside the docker image","text":"<p>If you are encountering permissions issues with folders internal to the docker image (not your TrueNAS dataset), consider temporarily setting the user to root (user: 0). If you do this, it is recommended you fix local file permissions via shell and return access back to a non-root user.</p> <p>In my particular setup, I had to create a user/group in TrueNAS with uid:gid of 1000:1000 and auxiliary group <code>apps</code> due to hard-coded values in the RomM docker image. This resolved outstanding issues I had with my instance of RomM talking to its Redis instance.</p>"},{"location":"System-Setup/TrueNAS-Setup-Guide/#contributing","title":"Contributing","text":"<p>If you have any suggestions or improvements, please submit a pull request to the RomM wiki.</p>"},{"location":"System-Setup/Unraid-Setup-Guide/","title":"Unraid Setup","text":""},{"location":"System-Setup/Unraid-Setup-Guide/#prerequisites","title":"Prerequisites","text":"<p>Before getting started, install the Community Apps plugin for Unraid.</p>"},{"location":"System-Setup/Unraid-Setup-Guide/#docker-network","title":"Docker network","text":"<p>You'll want to create a custom bridge-type network for both containers to communicate with each other. This will prevent a number of common issues Unraid users tend to come across during setup. This can be done with the following command: <code>docker network create romm</code>, and you can verify it worked with <code>docker network ls</code>.</p> <p></p>"},{"location":"System-Setup/Unraid-Setup-Guide/#mariadb","title":"MariaDB","text":"<p>MariaDB is required to run RomM, so install it from the plugin registry. Only the official and linuxserver versions are supported, but the official version is preferred.</p> <p></p> <p>Now fill in all the environment variables; descriptions of the options and sensible defaults are listed in the example docker-compose.yml file.</p> <p>Warning</p> <p>The network type must be set to <code>Custom: romm</code></p> <p></p>"},{"location":"System-Setup/Unraid-Setup-Guide/#installation","title":"Installation","text":"<p>From the Unraid dashboard, click <code>APPS</code> in the navigation bar. In the search bar, search for <code>romm</code>, and install the app listed as \"OFFICIAL\". This one is maintained by our team and is the most up-to-date.</p> <p></p>"},{"location":"System-Setup/Unraid-Setup-Guide/#configuration","title":"Configuration","text":"<p>Configure the required environment variables, ports and paths as per the example docker-compose.yml file.</p> <p>Warning</p> <p>The network type must also be set to <code>Custom: romm</code></p> <p></p> <p>Apply the changes, then head to the <code>DOCKER</code> tab. You should see both containers in a running state, and can access RomM using the IP:PORT of the container (highlighted below).</p> <p></p>"},{"location":"System-Setup/Unraid-Setup-Guide/#updating","title":"Updating","text":"<p>**It's strongly recommended to backup the <code>appdata</code> folder (or mount it in a safe location) before updating, since tearing down the container will wipe the resources (covers, screenshots, etc.)</p>"},{"location":"System-Setup/Unraid-Setup-Guide/#video-tutorial","title":"Video tutorial","text":"<p>DemonWarriorTech has published How to Install RomM on Unraid (Beginner Friendly) on installing and running RomM on Unraid for Beginners with an in depth instructions and explanation of the software install and how to use it.</p> <p></p> <p>AlienTech42 has published a great video on installing and running RomM on Unraid. While a bit out of date vis-a-vis install instructions, it's still very useful for general setup and debugging. Check it out!</p> <p></p>"},{"location":"System-Setup/Unraid-Setup-Guide/#shout-outs","title":"Shout-outs","text":"<p>We want to give a special shout-out to @Smurre95 and @sfumat0 for their help documenting this process, and working towards getting RomM listed in CA. \ud83e\udd1d</p>"},{"location":"Tools/Igir-Collection-Manager/","title":"Igir Collection Manager","text":"<p>Igir is a zero-setup ROM collection manager that sorts, filters, extracts or archives, patches, and reports on collections of any size on any OS. It can be used to rename your ROMs to match the RomM database, and to move them into a new directory structure.</p>"},{"location":"Tools/Igir-Collection-Manager/#setup","title":"Setup","text":""},{"location":"Tools/Igir-Collection-Manager/#directory-structure","title":"Directory structure","text":"<p>The directory structure is important for running the bulk ROM renaming script. Before running the bulk ROM renaming script, set up your directories as follows:</p> <pre><code>.\n\u251c\u2500\u2500 dats/ # DAT files from no-intro.org\n\u251c\u2500\u2500 roms/ # Original ROM collection\n\u251c\u2500\u2500 roms-unverified/ # Working copy of ROMs\n\u2514\u2500\u2500 igir-romm-cleanup.sh\n</code></pre>"},{"location":"Tools/Igir-Collection-Manager/#initial-setup-steps","title":"Initial Setup Steps","text":"<ol> <li> <p>Create a working copy of your ROMs:</p> <pre><code>cp -r roms/ roms-unverified/\n</code></pre> <p>This provides a safe working environment and allows for easy script adjustment if needed.</p> </li> <li> <p>Download DAT Files:</p> <ul> <li>For cartridge-based systems:<ul> <li>Visit No-Intro.org Daily Download</li> <li>Download the latest DAT compilation</li> </ul> </li> <li>For optical media (e.g., PlayStation):<ul> <li>Visit redump.org</li> <li>Download platform-specific DAT files</li> </ul> </li> </ul> <p>Extract the DAT files to your <code>dats</code> directory. You can optionally extract a subset of the .dat files into the directory instead.</p> </li> </ol>"},{"location":"Tools/Igir-Collection-Manager/#configuration","title":"Configuration","text":"<p>Create the cleanup script <code>igir-romm-cleanup.sh</code> with the contents below:</p> <pre><code>#!/usr/bin/env bash\nset -ou pipefail\ncd \"$(dirname \"${0}\")\"\n\nINPUT_DIR=roms-unverified\nOUTPUT_DIR=roms-verified\n\n# Documentation: https://igir.io/\n# Uses dat files: https://datomatic.no-intro.org/index.php?page=download&amp;op=daily\ntime npx -y igir@latest \\\n  move \\\n  extract \\\n  report \\\n  test \\\n  -d dats/ \\\n  -i \"${INPUT_DIR}/\" \\\n  -o \"${OUTPUT_DIR}/{romm}/\" \\\n  --input-checksum-quick false \\\n  --input-checksum-min CRC32 \\\n  --input-checksum-max SHA256 \\\n  --only-retail\n</code></pre> <p>Make the script executable:</p> <pre><code>chmod a+x igir-romm-cleanup.sh\n</code></pre>"},{"location":"Tools/Igir-Collection-Manager/#usage","title":"Usage","text":""},{"location":"Tools/Igir-Collection-Manager/#run-the-script","title":"Run the script","text":"<p>Run the script. It will generate a new output directory named <code>roms-verified</code>, moving the files from <code>roms-unverified</code> if its checksum matches any of the known checksums in the DAT files provided. Any ROMs not identified will remain in the <code>roms-unverified</code> directory.</p>"},{"location":"Tools/Igir-Collection-Manager/#manually-move-over-remaining-files","title":"Manually move over remaining files","text":"<p>The script may not identify all of the ROMs in your input directory. You can choose to migrate them over manually:</p> <pre><code>npx -y igir@latest \\\n  move \\\n  -i roms-unverified/ \\\n  -o roms-verified/ \\\n  --dir-mirror\n</code></pre> <p>This will move your ROMs from the input to the output directory, preserving the subdirectory structure. It also cleans up file extensions in the process.</p>"},{"location":"Tools/Igir-Collection-Manager/#reorganize-multi-disc-games","title":"Reorganize multi-disc games","text":"<p>The Igir script will move games that have multiple discs to separate folders. This can confuse RomM's game detection, and those games need to be reorganized into single folders with many discs.</p> <p>To do this enter your platform directory, such as <code>ps</code> or <code>psx</code> and run the following:</p> <pre><code>ls -d *Disc* | while read dir; do\n  game=$(echo \"${dir}\" | sed -r 's/ \\(Disc [0-9]+\\)//')\n  mkdir -p \"${game}\"\n  mv \"${dir}\"/* \"${game}/\"\n  rm -rf \"${dir}\"\ndone\n</code></pre> <p>This will find any directory with <code>(Disc</code> in the name and move the files into a new directory without the <code>(Disc #)</code> string. For example:</p> <p>Before:</p> <pre><code>Final Fantasy VII (Disc 1) (USA)\nFinal Fantasy VII (Disc 2) (USA)\n</code></pre> <p>Gets combined to:</p> <pre><code>Final Fantasy VII (USA)\n</code></pre>"},{"location":"Troubleshooting/Authentication-Issues/","title":"Troubleshooting Authentication","text":""},{"location":"Troubleshooting/Authentication-Issues/#error-403-forbidden","title":"Error: <code>403 Forbidden</code>","text":"<p>When authentication is enabled, most endpoints will return a <code>403 Forbidden</code> response if you're not authenticated, or if your sessions is in a broken state. The session key can be reset by clearing your cookies.</p> <p>CSRF protection is also enabled, which helps to mitigates CSRF attacks (useful if your instance is public). If you encounter a <code>Forbidden (403) CSRF verification failed</code> error, simply reloading your browser should force it to fetch a fresh CSRF cookie.</p>"},{"location":"Troubleshooting/Authentication-Issues/#error-unable-to-login-csrf-token-verification-failed","title":"Error: <code>Unable to login: CSRF token verification failed</code>","text":"<p>This error is known to happen on Chrome, but could happen in other browsers; manually clear your cookies (specifically one called <code>csrftoken</code>) and hard reload your browser window (CMD+SHIFT+R on macOS, CTRL+F5 on Windows).</p>"},{"location":"Troubleshooting/Authentication-Issues/#error-400-bad-request-on-the-websocket-endpoint","title":"Error: <code>400 Bad Request</code> on the Websocket endpoint","text":"<p>If you're running RomM behind a reverse-proxy (Caddy, Nginx, etc.), ensure that Websockets are supported and enabled. This may vary depending on the reverse proxy solution being used. In the case of Nginx Proxy Manager, enable the \"Websockets Support\" toggle when editing the proxy host.</p>"},{"location":"Troubleshooting/Miscellaneous-Troubleshooting/","title":"Miscellaneous Troubleshooting","text":""},{"location":"Troubleshooting/Miscellaneous-Troubleshooting/#restarting-the-container-when-using-sqlite-drops-all-the-datarequires-a-full-re-scan","title":"Restarting the container when using SQLite drops all the data/requires a full re-scan","text":"<p>Verify that the database is mapped to a persistent storage volume in your docker compose or Unraid template.</p> <pre><code>\"/path/to/database:/romm/database\" # [Optional] Only needed if ROMM_DB_DRIVER=sqlite or not set\n</code></pre>"},{"location":"Troubleshooting/Miscellaneous-Troubleshooting/#error-could-not-get-twitch-auth-token-check-client_id-and-client_secret","title":"Error: <code>Could not get twitch auth token: check client_id and client_secret</code>","text":"<p>This is likely due to mis-configured environment variables; verify that <code>CLIENT_ID</code> and <code>CLIENT_SECRET</code> are set correctly, and that both match the values in IGDB.</p>"},{"location":"Troubleshooting/Miscellaneous-Troubleshooting/#how-to-view-romm-logs-to-assist-with-troubleshooting","title":"How to view RomM logs to assist with troubleshooting","text":"<p>Each platform may have different logs, but check the stdout logs for docker. For example when using the recommended docker compose setup <code>docker logs -f romm</code> will display a continuous stream of the log. Most lines start with <code>INFO</code>, <code>WARNING</code>, or <code>ERROR</code></p>"},{"location":"Troubleshooting/Scanning-Issues/","title":"Troubleshooting Scanning","text":""},{"location":"Troubleshooting/Scanning-Issues/#scan-is-skipping-all-platformsends-instantly","title":"Scan is skipping all platforms/ends instantly","text":"<p>There are a few common reasons why a scan may end instantly/without scanning platforms</p> <ul> <li>Badly mounted library: verify that you mounted your ROMs folder at <code>/romm/library</code></li> <li>Incorrect permissions: the app needs to read the files and folders in your library, check their permissions with <code>ls -lh</code></li> <li>Invalid folder structure: verify that your folder structure matches the one in the README</li> </ul>"},{"location":"Troubleshooting/Scanning-Issues/#roms-not-found-for-platform-x-check-romm-folder-structure","title":"ROMs not found for platform X, check <code>romm</code> folder structure","text":"<p>This is the same issue as the one above, and can be quickly solved by verifying your folder structure. RomM expects a library with a folder named <code>roms</code> in it, for example:</p> <ul> <li><code>/server/media/library:/romm/library</code></li> <li><code>/server/media/games/roms:/romm/library/roms</code></li> </ul>"},{"location":"Troubleshooting/Scanning-Issues/#scan-does-not-recognize-a-platform","title":"Scan does not recognize a platform","text":"<p>When scanning the folders mounted in <code>/library/roms</code>, the scanner tries to match the folder name with the platform's slug in IGDB. If you notice that the scanner isn't detecting a platform, verify that the folder name matches the slug in the URL of the platform in IGDB. For example, the Nintendo 64DD has the URL https://www.igdb.com/platforms/64dd, so the folder should be named <code>64dd</code>.</p>"},{"location":"Troubleshooting/Scanning-Issues/#scan-times-out-after-4-hours","title":"Scan times out after ~4 hours","text":"<p>The background scan task times out after 4 hours, which can happen if you have a very large library. The easiest work around is to keep running scans every 4 hours, without checking the \"Complete re-scan\" option. You can also change the timeout via environment variable <code>SCAN_TIMEOUT</code>.</p>"},{"location":"Troubleshooting/Scanning-Issues/#scan-stops-before-finishing-a-platform","title":"Scan stops before finishing a platform","text":"<p>Check the logs for RomM, you should find a line that looks like <code>ERROR:    [RomM][scan_handler][2025-04-12 11:48:55]</code> that explains why the scanner stopped. This can often happen due to a corrupted file or a file the python zipfile library cannot handle, such as old DOS zip files with backslashes instead of forward slashes.</p>"},{"location":"Troubleshooting/Scanning-Issues/#when-scanning-a-very-large-library-with-many-platforms-it-is-difficult-to-keep-track-of-which-systems-have-scanned-in","title":"When scanning a very large library with many platforms it is difficult to keep track of which systems have scanned in","text":"<p>The easiest method is to check the logs via this command, which will list all the scanned platforms since the RomM container was started <code>docker logs romm 2&gt;/dev/null|egrep 'scan_handler.*Identified as.*\ud83c\udfae'</code></p> <p>Here is an example output:</p> <pre><code>$ docker logs romm 2&gt;/dev/null|egrep 'scan_handler.*Identified as.*\ud83c\udfae'\nINFO:     [RomM][scan_handler][2025-04-12 11:37:40]   Identified as PlayStation \ud83c\udfae\nINFO:     [RomM][scan_handler][2025-04-12 14:39:32]   Identified as DOS \ud83c\udfae\nINFO:     [RomM][scan_handler][2025-04-13 12:50:42]   Identified as WonderSwan \ud83c\udfae\n</code></pre>"},{"location":"Troubleshooting/Synology-Issues/","title":"Troubleshooting Synology","text":""},{"location":"Troubleshooting/Synology-Issues/#errno-13-access-denied","title":"ErrNo 13: Access Denied","text":"<p>We have noticed recently a spate of access denied on Synology systems via Portainer or even docker manager. The ErrNo13 is directly related to Synology and it is a simple permission issue. To fix it please do the following:</p> <ol> <li>Make sure SSH is enabled on your Synology product. Refer to here if it is not Enable SSH</li> <li>Connect to SSH and login as your admin username and password (Same login used to login to DSM web page)</li> <li>Take a note on your user:group you can find this by typing ID when logged into SSH.</li> <li>Type the following commands in the SSH window.</li> </ol> <p><code>sudo chown -R user:group /path/to/library</code></p> <p><code>sudo chmod -R a=,a+rX,u+w,g+w /path/to/library</code></p> <p><code>sudo chown -R user:group /path/to/assets</code></p> <p><code>sudo chmod -R a=,a+rX,u+w,g+w /path/to/assets</code></p> <p><code>sudo chown -R user:group /path/to/config</code></p> <p><code>sudo chmod -R a=,a+rX,u+w,g+w /path/to/config</code></p> <p>You will find the relevant directories in your compose, this is basically the folders where you store your RomM information and we are just resetting permissions. Restart the containers and you should now have no issues scanning information in!</p> <p>Any issues please ask in the Discord.</p> <p>Thanks to Docker IDs - DrFrankenstein for the guidance from his blog.</p>"}]}